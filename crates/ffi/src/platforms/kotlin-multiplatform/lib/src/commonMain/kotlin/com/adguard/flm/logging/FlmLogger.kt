package com.adguard.flm.logging

import kotlin.concurrent.Volatile

/**
 * The FlmLogger is the central logging facility for the Filter List Manager library,
 * providing a flexible callback-based logging system that allows applications to integrate
 * FLM logging with their existing logging infrastructure.
 *
 * This singleton object follows a callback pattern where the host application can register
 * a single logging callback to receive all log messages from the FLM library. The logger
 * supports three severity levels: Info, Warn, and Error, allowing for appropriate message
 * filtering and handling.
 *
 * ## Design Pattern
 *
 * FlmLogger is implemented as a Kotlin `object` (singleton), ensuring there is only one
 * logging instance throughout the application lifecycle. This design provides:
 * - Global access point for all FLM components
 * - Centralized logging configuration
 * - Consistent logging behavior across the library
 *
 * ## Thread Safety
 *
 * The logger is designed to be thread-safe:
 * - The callback property is marked with `@Volatile` to ensure visibility across threads
 * - Callback invocations are safe from any thread
 * - Setting a new callback atomically replaces the previous one
 *
 * ## Usage Example
 *
 * ### Basic Setup
 * ```kotlin
 * // Set up the logging callback in your application initialization
 * FlmLogger.setCallback { level, message, throwable ->
 *     when (level) {
 *         FlmLogLevel.Info -> Log.i("FLM", message)
 *         FlmLogLevel.Warn -> Log.w("FLM", message)
 *         FlmLogLevel.Error -> {
 *             if (throwable != null) {
 *                 Log.e("FLM", message, throwable)
 *             } else {
 *                 Log.e("FLM", message)
 *             }
 *         }
 *     }
 * }
 * ```
 *
 * ### Integration with Custom Logging Framework
 * ```kotlin
 * FlmLogger.setCallback { level, message, throwable ->
 *     val priority = when (level) {
 *         FlmLogLevel.Info -> LogPriority.INFO
 *         FlmLogLevel.Warn -> LogPriority.WARNING
 *         FlmLogLevel.Error -> LogPriority.ERROR
 *     }
 *
 *     // Log with stack trace if exception is present
 *     if (throwable != null) {
 *         MyLogger.log(priority, "FilterListManager", message, throwable)
 *     } else {
 *         MyLogger.log(priority, "FilterListManager", message)
 *     }
 * }
 * ```
 *
 * ### Handling Exceptions
 * ```kotlin
 * FlmLogger.setCallback { level, message, throwable ->
 *     when (level) {
 *         FlmLogLevel.Error -> {
 *             // Log the message
 *             errorLogger.log(message)
 *
 *             // Log the stack trace if available
 *             throwable?.let {
 *                 errorLogger.log("Stack trace: ${it.stackTraceToString()}")
 *                 // Report to crash analytics
 *                 CrashAnalytics.recordException(it)
 *             }
 *         }
 *         else -> standardLogger.log(level, message)
 *     }
 * }
 * ```
 *
 * ### Disabling Logging
 * ```kotlin
 * // To disable logging in production, simply don't set a callback
 * // or set an empty callback
 * FlmLogger.setCallback { _, _, _ -> /* no-op */ }
 * ```
 *
 * ## Internal Usage
 *
 * The `info`, `warn`, and `error` methods are marked as `internal`, restricting their usage
 * to within the FLM library. This ensures that only FLM components can generate log messages,
 * maintaining control over the logging output and preventing misuse by external code.
 *
 * @see FlmLogLevel for available logging severity levels
 */
object FlmLogger {

    /**
     * The current logging callback function.
     *
     * This callback receives all log messages from the FLM library, along with optional
     * exception information for error-level messages. It is marked as `@Volatile` to ensure
     * thread-safe access and visibility across different threads. When null, all logging
     * is effectively disabled as messages have nowhere to be sent.
     */
    @Volatile
    private var callback: ((FlmLogLevel, String, Throwable?) -> Unit)? = null

    /**
     * Sets the global logging callback for the Filter List Manager library.
     *
     * This method allows the host application to register a callback function that will
     * receive all log messages generated by the FLM library. The callback will be invoked
     * with the log level, message, and an optional throwable for each logging event.
     *
     * Only one callback can be active at a time. Setting a new callback will replace any
     * previously registered callback. The callback can be called from any thread, so the
     * implementation should be thread-safe if necessary.
     *
     * @param block The callback function that will receive log messages.
     *              The function parameters are:
     *              - level: The [FlmLogLevel] indicating the severity of the message
     *              - message: The log message string
     *              - throwable: An optional [Throwable] associated with error messages.
     *                           Will be null for Info and Warn levels, may contain exception
     *                           details for Error level messages.
     *
     * @sample
     * ```kotlin
     * FlmLogger.setCallback { level, message, throwable ->
     *     val timestamp = System.currentTimeMillis()
     *     when {
     *         throwable != null -> {
     *             println("[$timestamp] [FLM-$level] $message")
     *             println("Exception: ${throwable.message}")
     *             throwable.printStackTrace()
     *         }
     *         else -> println("[$timestamp] [FLM-$level] $message")
     *     }
     * }
     * ```
     */
    fun setCallback(block: (FlmLogLevel, String, Throwable?) -> Unit) {
        callback = block
    }

    /**
     * Logs an informational message.
     *
     * This method is used internally by FLM components to log informational messages
     * that describe normal operations and state changes. These messages are useful for
     * tracking the flow of operations but do not indicate any problems.
     *
     * The message will only be delivered if a callback has been set via [setCallback].
     *
     * @param message The informational message to log
     */
    internal fun info(message: String) {
        callback?.invoke(FlmLogLevel.Info, message, null)
    }

    /**
     * Logs a warning message.
     *
     * This method is used internally by FLM components to log warning messages that
     * indicate potentially harmful situations or unexpected conditions that don't prevent
     * the library from functioning but might require attention.
     *
     * Common scenarios for warnings include:
     * - Deprecated feature usage
     * - Recoverable errors
     * - Performance issues
     * - Missing optional configurations
     *
     * The message will only be delivered if a callback has been set via [setCallback].
     *
     * @param message The warning message to log
     */
    internal fun warn(message: String) {
        callback?.invoke(FlmLogLevel.Warn, message, null)
    }

    /**
     * Logs an error message with an optional exception.
     *
     * This method is used internally by FLM components to log error messages that
     * indicate serious problems that have occurred during execution. These typically
     * represent failures that prevent normal operation of specific features. When an
     * exception is the cause of the error, it can be passed to provide stack trace
     * information for debugging.
     *
     * Common scenarios for errors include:
     * - Network request failures
     * - Database operation failures
     * - Invalid data or corrupted files
     * - Unrecoverable exceptions
     *
     * The message will only be delivered if a callback has been set via [setCallback].
     *
     * @param message The error message to log
     * @param th Optional throwable that caused the error. When provided, the callback
     *           will receive this exception for logging stack traces or crash reporting.
     */
    internal fun error(message: String, th: Throwable? = null) {
        callback?.invoke(FlmLogLevel.Error, message, th)
    }
}
