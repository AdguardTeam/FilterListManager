// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: configuration.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum FilterListManager_FilterListType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case standard // = 0
  case dns // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .standard
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .standard
    case 1: self = .dns
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .standard: return 0
    case .dns: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension FilterListManager_FilterListType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [FilterListManager_FilterListType] = [
    .standard,
    .dns,
  ]
}

#endif  // swift(>=4.2)

/// FLM Requests proxy mode
public enum FilterListManager_RawRequestProxyMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// System proxy will be used
  case useSystemProxy // = 0

  /// All proxies disabled
  case noProxy // = 1

  /// Use custom proxy
  case useCustomProxy // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .useSystemProxy
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .useSystemProxy
    case 1: self = .noProxy
    case 2: self = .useCustomProxy
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .useSystemProxy: return 0
    case .noProxy: return 1
    case .useCustomProxy: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension FilterListManager_RawRequestProxyMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [FilterListManager_RawRequestProxyMode] = [
    .useSystemProxy,
    .noProxy,
    .useCustomProxy,
  ]
}

#endif  // swift(>=4.2)

public struct FilterListManager_Configuration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var filterListType: FilterListManager_FilterListType = .standard

  /// Absolute path for library working directory.
  /// This will be used for database operating.
  /// If value is "None", `cwd` will be used.
  public var workingDirectory: String = String()

  /// Locale that needs to be used to extract localized names and descriptions.
  /// Locale `en-GB` will be normalized to internal `en_GB` representation.
  /// Default value: en.
  public var locale: String = String()

  /// Default period for expires in seconds (unless specified in "Expires", or its value is too small).
  /// Default value: 86400 (1 day).
  /// Values < 3600 will be clamped to 3600.
  public var defaultFilterListExpiresPeriodSec: Int32 = 0

  /// List of literal constants for filters conditional compilation.
  public var compilerConditionalConstants: [String] = []

  /// URL of the index (filters.json) file.
  public var metadataURL: String = String()

  /// URL of the locales (filters_i18n.json) file.
  public var metadataLocalesURL: String = String()

  /// Requests timeouts in milliseconds. Default value 60000 (60 seconds).
  public var requestTimeoutMs: Int32 = 0

  /// “Uplifting” a database is a set of measures that brings the database up to date:
  public var autoLiftUpDatabase: Bool = false

  /// Proxy mode
  public var requestProxyMode: FilterListManager_RawRequestProxyMode = .useSystemProxy

  /// Custom proxy addr for requests
  public var requestCustomProxyAddr: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension FilterListManager_FilterListType: @unchecked Sendable {}
extension FilterListManager_RawRequestProxyMode: @unchecked Sendable {}
extension FilterListManager_Configuration: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "filter_list_manager"

extension FilterListManager_FilterListType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STANDARD"),
    1: .same(proto: "DNS"),
  ]
}

extension FilterListManager_RawRequestProxyMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "USE_SYSTEM_PROXY"),
    1: .same(proto: "NO_PROXY"),
    2: .same(proto: "USE_CUSTOM_PROXY"),
  ]
}

extension FilterListManager_Configuration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Configuration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "filter_list_type"),
    2: .standard(proto: "working_directory"),
    3: .same(proto: "locale"),
    4: .standard(proto: "default_filter_list_expires_period_sec"),
    5: .standard(proto: "compiler_conditional_constants"),
    6: .standard(proto: "metadata_url"),
    7: .standard(proto: "metadata_locales_url"),
    8: .standard(proto: "request_timeout_ms"),
    9: .standard(proto: "auto_lift_up_database"),
    10: .standard(proto: "request_proxy_mode"),
    11: .standard(proto: "request_custom_proxy_addr"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.filterListType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.workingDirectory) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.locale) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.defaultFilterListExpiresPeriodSec) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.compilerConditionalConstants) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.metadataURL) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.metadataLocalesURL) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.requestTimeoutMs) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.autoLiftUpDatabase) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.requestProxyMode) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.requestCustomProxyAddr) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.filterListType != .standard {
      try visitor.visitSingularEnumField(value: self.filterListType, fieldNumber: 1)
    }
    if !self.workingDirectory.isEmpty {
      try visitor.visitSingularStringField(value: self.workingDirectory, fieldNumber: 2)
    }
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 3)
    }
    if self.defaultFilterListExpiresPeriodSec != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultFilterListExpiresPeriodSec, fieldNumber: 4)
    }
    if !self.compilerConditionalConstants.isEmpty {
      try visitor.visitRepeatedStringField(value: self.compilerConditionalConstants, fieldNumber: 5)
    }
    if !self.metadataURL.isEmpty {
      try visitor.visitSingularStringField(value: self.metadataURL, fieldNumber: 6)
    }
    if !self.metadataLocalesURL.isEmpty {
      try visitor.visitSingularStringField(value: self.metadataLocalesURL, fieldNumber: 7)
    }
    if self.requestTimeoutMs != 0 {
      try visitor.visitSingularInt32Field(value: self.requestTimeoutMs, fieldNumber: 8)
    }
    if self.autoLiftUpDatabase != false {
      try visitor.visitSingularBoolField(value: self.autoLiftUpDatabase, fieldNumber: 9)
    }
    if self.requestProxyMode != .useSystemProxy {
      try visitor.visitSingularEnumField(value: self.requestProxyMode, fieldNumber: 10)
    }
    if !self.requestCustomProxyAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.requestCustomProxyAddr, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: FilterListManager_Configuration, rhs: FilterListManager_Configuration) -> Bool {
    if lhs.filterListType != rhs.filterListType {return false}
    if lhs.workingDirectory != rhs.workingDirectory {return false}
    if lhs.locale != rhs.locale {return false}
    if lhs.defaultFilterListExpiresPeriodSec != rhs.defaultFilterListExpiresPeriodSec {return false}
    if lhs.compilerConditionalConstants != rhs.compilerConditionalConstants {return false}
    if lhs.metadataURL != rhs.metadataURL {return false}
    if lhs.metadataLocalesURL != rhs.metadataLocalesURL {return false}
    if lhs.requestTimeoutMs != rhs.requestTimeoutMs {return false}
    if lhs.autoLiftUpDatabase != rhs.autoLiftUpDatabase {return false}
    if lhs.requestProxyMode != rhs.requestProxyMode {return false}
    if lhs.requestCustomProxyAddr != rhs.requestCustomProxyAddr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
