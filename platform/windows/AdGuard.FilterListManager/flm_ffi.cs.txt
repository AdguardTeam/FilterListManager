// <auto-generated>
//     This file was generated by uniffi-bindgen-cs v0.8.0+v0.25.0
//     See https://github.com/NordSecurity/uniffi-bindgen-cs for more information.
// </auto-generated>

#nullable enable




using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
namespace com.adguard.flm;



// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

[StructLayout(LayoutKind.Sequential)]
internal struct RustBuffer {
    public int capacity;
    public int len;
    public IntPtr data;

    public static RustBuffer Alloc(int size) {
        return _UniffiHelpers.RustCall((ref RustCallStatus status) => {
            var buffer = _UniFFILib.ffi_filter_list_manager_ffi_rustbuffer_alloc(size, ref status);
            if (buffer.data == IntPtr.Zero) {
                throw new AllocationException($"RustBuffer.Alloc() returned null data pointer (size={size})");
            }
            return buffer;
        });
    }

    public static void Free(RustBuffer buffer) {
        _UniffiHelpers.RustCall((ref RustCallStatus status) => {
            _UniFFILib.ffi_filter_list_manager_ffi_rustbuffer_free(buffer, ref status);
        });
    }

    public static BigEndianStream MemoryStream(IntPtr data, int length) {
        unsafe {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), length));
        }
    }

    public BigEndianStream AsStream() {
        unsafe {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), len));
        }
    }

    public BigEndianStream AsWriteableStream() {
        unsafe {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), capacity, capacity, FileAccess.Write));
        }
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to managed memory, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

[StructLayout(LayoutKind.Sequential)]
internal struct ForeignBytes {
    public int length;
    public IntPtr data;
}


// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
internal abstract class FfiConverter<CsType, FfiType> {
    // Convert an FFI type to a C# type
    public abstract CsType Lift(FfiType value);

    // Convert C# type to an FFI type
    public abstract FfiType Lower(CsType value);

    // Read a C# type from a `ByteBuffer`
    public abstract CsType Read(BigEndianStream stream);

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    public abstract int AllocationSize(CsType value);

    // Write a C# type to a `ByteBuffer`
    public abstract void Write(CsType value, BigEndianStream stream);

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    public RustBuffer LowerIntoRustBuffer(CsType value) {
        var rbuf = RustBuffer.Alloc(AllocationSize(value));
        try {
            var stream = rbuf.AsWriteableStream();
            Write(value, stream);
            rbuf.len = Convert.ToInt32(stream.Position);
            return rbuf;
        } catch {
            RustBuffer.Free(rbuf);
            throw;
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    protected CsType LiftFromRustBuffer(RustBuffer rbuf) {
        var stream = rbuf.AsStream();
        try {
           var item = Read(stream);
           if (stream.HasRemaining()) {
               throw new InternalException("junk remaining in buffer after lifting, something is very wrong!!");
           }
           return item;
        } finally {
            RustBuffer.Free(rbuf);
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
internal abstract class FfiConverterRustBuffer<CsType>: FfiConverter<CsType, RustBuffer> {
    public override CsType Lift(RustBuffer value) {
        return LiftFromRustBuffer(value);
    }
    public override RustBuffer Lower(CsType value) {
        return LowerIntoRustBuffer(value);
    }
}


// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
[StructLayout(LayoutKind.Sequential)]
struct RustCallStatus {
    public sbyte code;
    public RustBuffer error_buf;

    public bool IsSuccess() {
        return code == 0;
    }

    public bool IsError() {
        return code == 1;
    }

    public bool IsPanic() {
        return code == 2;
    }
}

// Base class for all uniffi exceptions
internal class UniffiException: Exception {
    public UniffiException(): base() {}
    public UniffiException(string message): base(message) {}
}

internal class UndeclaredErrorException: UniffiException {
    public UndeclaredErrorException(string message): base(message) {}
}

internal class PanicException: UniffiException {
    public PanicException(string message): base(message) {}
}

internal class AllocationException: UniffiException {
    public AllocationException(string message): base(message) {}
}

internal class InternalException: UniffiException {
    public InternalException(string message): base(message) {}
}

internal class InvalidEnumException: InternalException {
    public InvalidEnumException(string message): base(message) {
    }
}

internal class UniffiContractVersionException: UniffiException {
    public UniffiContractVersionException(string message): base(message) {
    }
}

internal class UniffiContractChecksumException: UniffiException {
    public UniffiContractChecksumException(string message): base(message) {
    }
}

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> where E: Exception {
    E Lift(RustBuffer error_buf);
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
class NullCallStatusErrorHandler: CallStatusErrorHandler<UniffiException> {
    public static NullCallStatusErrorHandler INSTANCE = new NullCallStatusErrorHandler();

    public UniffiException Lift(RustBuffer error_buf) {
        RustBuffer.Free(error_buf);
        return new UndeclaredErrorException("library has returned an error not declared in UNIFFI interface file");
    }
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
class _UniffiHelpers {
    public delegate void RustCallAction(ref RustCallStatus status);
    public delegate U RustCallFunc<out U>(ref RustCallStatus status);

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static U RustCallWithError<U, E>(CallStatusErrorHandler<E> errorHandler, RustCallFunc<U> callback)
        where E: UniffiException
    {
        var status = new RustCallStatus();
        var return_value = callback(ref status);
        if (status.IsSuccess()) {
            return return_value;
        } else if (status.IsError()) {
            throw errorHandler.Lift(status.error_buf);
        } else if (status.IsPanic()) {
            // when the rust code sees a panic, it tries to construct a rustbuffer
            // with the message.  but if that code panics, then it just sends back
            // an empty buffer.
            if (status.error_buf.len > 0) {
                throw new PanicException(FfiConverterString.INSTANCE.Lift(status.error_buf));
            } else {
                throw new PanicException("Rust panic");
            }
        } else {
            throw new InternalException($"Unknown rust call status: {status.code}");
        }
    }

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static void RustCallWithError<E>(CallStatusErrorHandler<E> errorHandler, RustCallAction callback)
        where E: UniffiException
    {
        _UniffiHelpers.RustCallWithError(errorHandler, (ref RustCallStatus status) => {
            callback(ref status);
            return 0;
        });
    }

    // Call a rust function that returns a plain value
    public static U RustCall<U>(RustCallFunc<U> callback) {
        return _UniffiHelpers.RustCallWithError(NullCallStatusErrorHandler.INSTANCE, callback);
    }

    // Call a rust function that returns a plain value
    public static void RustCall(RustCallAction callback) {
        _UniffiHelpers.RustCall((ref RustCallStatus status) => {
            callback(ref status);
            return 0;
        });
    }
}


// Big endian streams are not yet available in dotnet :'(
// https://github.com/dotnet/runtime/issues/26904

class StreamUnderflowException: Exception {
    public StreamUnderflowException() {
    }
}

class BigEndianStream {
    Stream stream;
    public BigEndianStream(Stream stream) {
        this.stream = stream;
    }

    public bool HasRemaining() {
        return (stream.Length - stream.Position) > 0;
    }

    public long Position {
        get => stream.Position;
        set => stream.Position = value;
    }

    public void WriteBytes(byte[] value) {
        stream.Write(value, 0, value.Length);
    }

    public void WriteByte(byte value) {
        stream.WriteByte(value);
    }

    public void WriteUShort(ushort value) {
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteUInt(uint value) {
        stream.WriteByte((byte)(value >> 24));
        stream.WriteByte((byte)(value >> 16));
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteULong(ulong value) {
        WriteUInt((uint)(value >> 32));
        WriteUInt((uint)value);
    }

    public void WriteSByte(sbyte value) {
        stream.WriteByte((byte)value);
    }

    public void WriteShort(short value) {
        WriteUShort((ushort)value);
    }

    public void WriteInt(int value) {
        WriteUInt((uint)value);
    }

    public void WriteFloat(float value) {
        unsafe {
            WriteInt(*((int*)&value));
        }
    }

    public void WriteLong(long value) {
        WriteULong((ulong)value);
    }

    public void WriteDouble(double value) {
        WriteLong(BitConverter.DoubleToInt64Bits(value));
    }

    public byte[] ReadBytes(int length) {
        CheckRemaining(length);
        byte[] result = new byte[length];
        stream.Read(result, 0, length);
        return result;
    }

    public byte ReadByte() {
        CheckRemaining(1);
        return Convert.ToByte(stream.ReadByte());
    }

    public ushort ReadUShort() {
        CheckRemaining(2);
        return (ushort)(stream.ReadByte() << 8 | stream.ReadByte());
    }

    public uint ReadUInt() {
        CheckRemaining(4);
        return (uint)(stream.ReadByte() << 24
            | stream.ReadByte() << 16
            | stream.ReadByte() << 8
            | stream.ReadByte());
    }

    public ulong ReadULong() {
        return (ulong)ReadUInt() << 32 | (ulong)ReadUInt();
    }

    public sbyte ReadSByte() {
        return (sbyte)ReadByte();
    }

    public short ReadShort() {
        return (short)ReadUShort();
    }

    public int ReadInt() {
        return (int)ReadUInt();
    }

    public float ReadFloat() {
        unsafe {
            int value = ReadInt();
            return *((float*)&value);
        }
    }

    public long ReadLong() {
        return (long)ReadULong();
    }

    public double ReadDouble() {
        return BitConverter.Int64BitsToDouble(ReadLong());
    }

    private void CheckRemaining(int length) {
        if (stream.Length - stream.Position < length) {
            throw new StreamUnderflowException();
        }
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.


// This is an implementation detail which will be called internally by the public API.
static class _UniFFILib {
    static _UniFFILib() {
        _UniFFILib.uniffiCheckContractApiVersion();
        _UniFFILib.uniffiCheckApiChecksums();
        
        }

    [DllImport("adguard-flm")]
    public static extern void uniffi_filter_list_manager_ffi_fn_free_filterlistmanager(
    IntPtr ptr,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern FilterListManagerSafeHandle uniffi_filter_list_manager_ffi_fn_constructor_filterlistmanager_new(RustBuffer @configuration,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern sbyte uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_change_locale(FilterListManagerSafeHandle @ptr,RustBuffer @suggestedLocale,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern long uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_delete_custom_filter_lists(FilterListManagerSafeHandle @ptr,RustBuffer @ids,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern long uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_enable_filter_lists(FilterListManagerSafeHandle @ptr,RustBuffer @ids,sbyte @isEnabled,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_fetch_filter_list_metadata(FilterListManagerSafeHandle @ptr,RustBuffer @url,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_fetch_filter_list_metadata_with_body(FilterListManagerSafeHandle @ptr,RustBuffer @url,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_force_update_filters_by_ids(FilterListManagerSafeHandle @ptr,RustBuffer @ids,int @looseTimeout,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_active_rules(FilterListManagerSafeHandle @ptr,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_all_groups(FilterListManagerSafeHandle @ptr,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_all_tags(FilterListManagerSafeHandle @ptr,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_database_path(FilterListManagerSafeHandle @ptr,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_database_version(FilterListManagerSafeHandle @ptr,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_disabled_rules(FilterListManagerSafeHandle @ptr,RustBuffer @ids,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_filter_rules_as_strings(FilterListManagerSafeHandle @ptr,RustBuffer @ids,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_full_filter_list_by_id(FilterListManagerSafeHandle @ptr,int @id,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_rules_count(FilterListManagerSafeHandle @ptr,RustBuffer @ids,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_stored_filters_metadata(FilterListManagerSafeHandle @ptr,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_stored_filters_metadata_by_id(FilterListManagerSafeHandle @ptr,int @id,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_install_custom_filter_from_string(FilterListManagerSafeHandle @ptr,RustBuffer @downloadUrl,long @lastDownloadTime,sbyte @isEnabled,sbyte @isTrusted,RustBuffer @filterBody,RustBuffer @customTitle,RustBuffer @customDescription,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_install_custom_filter_list(FilterListManagerSafeHandle @ptr,RustBuffer @downloadUrl,sbyte @isTrusted,RustBuffer @title,RustBuffer @description,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern long uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_install_filter_lists(FilterListManagerSafeHandle @ptr,RustBuffer @ids,sbyte @isInstalled,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_lift_up_database(FilterListManagerSafeHandle @ptr,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_pull_metadata(FilterListManagerSafeHandle @ptr,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_save_custom_filter_rules(FilterListManagerSafeHandle @ptr,RustBuffer @rules,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_save_disabled_rules(FilterListManagerSafeHandle @ptr,int @filterId,RustBuffer @disabledRules,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_save_rules_to_file_blob(FilterListManagerSafeHandle @ptr,int @filterId,RustBuffer @filePath,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_set_proxy_mode(FilterListManagerSafeHandle @ptr,RustBuffer @requestProxyMode,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern sbyte uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_update_custom_filter_metadata(FilterListManagerSafeHandle @ptr,int @filterId,RustBuffer @title,sbyte @isTrusted,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_update_filters(FilterListManagerSafeHandle @ptr,sbyte @ignoreFiltersExpiration,int @looseTimeout,sbyte @ignoreFiltersStatus,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_func_make_constants_structure(ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer uniffi_filter_list_manager_ffi_fn_func_make_default_configuration(ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer ffi_filter_list_manager_ffi_rustbuffer_alloc(int @size,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer ffi_filter_list_manager_ffi_rustbuffer_from_bytes(ForeignBytes @bytes,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rustbuffer_free(RustBuffer @buf,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer ffi_filter_list_manager_ffi_rustbuffer_reserve(RustBuffer @buf,int @additional,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_continuation_callback_set(IntPtr @callback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_u8(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_u8(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_u8(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern byte ffi_filter_list_manager_ffi_rust_future_complete_u8(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_i8(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_i8(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_i8(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern sbyte ffi_filter_list_manager_ffi_rust_future_complete_i8(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_u16(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_u16(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_u16(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern ushort ffi_filter_list_manager_ffi_rust_future_complete_u16(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_i16(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_i16(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_i16(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern short ffi_filter_list_manager_ffi_rust_future_complete_i16(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_u32(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_u32(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_u32(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern uint ffi_filter_list_manager_ffi_rust_future_complete_u32(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_i32(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_i32(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_i32(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern int ffi_filter_list_manager_ffi_rust_future_complete_i32(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_u64(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_u64(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_u64(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern ulong ffi_filter_list_manager_ffi_rust_future_complete_u64(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_i64(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_i64(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_i64(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern long ffi_filter_list_manager_ffi_rust_future_complete_i64(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_f32(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_f32(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_f32(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern float ffi_filter_list_manager_ffi_rust_future_complete_f32(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_f64(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_f64(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_f64(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern double ffi_filter_list_manager_ffi_rust_future_complete_f64(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_pointer(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_pointer(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_pointer(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern SafeHandle ffi_filter_list_manager_ffi_rust_future_complete_pointer(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_rust_buffer(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_rust_buffer(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_rust_buffer(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern RustBuffer ffi_filter_list_manager_ffi_rust_future_complete_rust_buffer(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_poll_void(IntPtr @handle,IntPtr @uniffiCallback
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_cancel_void(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_free_void(IntPtr @handle
    );

    [DllImport("adguard-flm")]
    public static extern void ffi_filter_list_manager_ffi_rust_future_complete_void(IntPtr @handle,ref RustCallStatus _uniffi_out_err
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_func_make_constants_structure(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_func_make_default_configuration(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_change_locale(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_delete_custom_filter_lists(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_enable_filter_lists(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_fetch_filter_list_metadata(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_fetch_filter_list_metadata_with_body(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_force_update_filters_by_ids(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_active_rules(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_all_groups(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_all_tags(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_database_path(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_database_version(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_disabled_rules(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_filter_rules_as_strings(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_full_filter_list_by_id(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_rules_count(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_stored_filters_metadata(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_stored_filters_metadata_by_id(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_install_custom_filter_from_string(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_install_custom_filter_list(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_install_filter_lists(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_lift_up_database(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_pull_metadata(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_save_custom_filter_rules(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_save_disabled_rules(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_save_rules_to_file_blob(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_set_proxy_mode(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_update_custom_filter_metadata(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_update_filters(
    );

    [DllImport("adguard-flm")]
    public static extern ushort uniffi_filter_list_manager_ffi_checksum_constructor_filterlistmanager_new(
    );

    [DllImport("adguard-flm")]
    public static extern uint ffi_filter_list_manager_ffi_uniffi_contract_version(
    );

    

    static void uniffiCheckContractApiVersion() {
        var scaffolding_contract_version = _UniFFILib.ffi_filter_list_manager_ffi_uniffi_contract_version();
        if (24 != scaffolding_contract_version) {
            throw new UniffiContractVersionException($"com.adguard.flm: uniffi bindings expected version `24`, library returned `{scaffolding_contract_version}`");
        }
    }

    static void uniffiCheckApiChecksums() {
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_func_make_constants_structure();
            if (checksum != 29147) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_func_make_constants_structure` checksum `29147`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_func_make_default_configuration();
            if (checksum != 58681) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_func_make_default_configuration` checksum `58681`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_change_locale();
            if (checksum != 51409) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_change_locale` checksum `51409`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_delete_custom_filter_lists();
            if (checksum != 24756) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_delete_custom_filter_lists` checksum `24756`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_enable_filter_lists();
            if (checksum != 6713) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_enable_filter_lists` checksum `6713`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_fetch_filter_list_metadata();
            if (checksum != 5456) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_fetch_filter_list_metadata` checksum `5456`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_fetch_filter_list_metadata_with_body();
            if (checksum != 39887) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_fetch_filter_list_metadata_with_body` checksum `39887`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_force_update_filters_by_ids();
            if (checksum != 63237) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_force_update_filters_by_ids` checksum `63237`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_active_rules();
            if (checksum != 57711) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_active_rules` checksum `57711`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_all_groups();
            if (checksum != 23881) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_all_groups` checksum `23881`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_all_tags();
            if (checksum != 39010) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_all_tags` checksum `39010`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_database_path();
            if (checksum != 63965) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_database_path` checksum `63965`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_database_version();
            if (checksum != 16124) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_database_version` checksum `16124`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_disabled_rules();
            if (checksum != 18367) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_disabled_rules` checksum `18367`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_filter_rules_as_strings();
            if (checksum != 58893) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_filter_rules_as_strings` checksum `58893`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_full_filter_list_by_id();
            if (checksum != 18236) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_full_filter_list_by_id` checksum `18236`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_rules_count();
            if (checksum != 14183) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_rules_count` checksum `14183`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_stored_filters_metadata();
            if (checksum != 36662) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_stored_filters_metadata` checksum `36662`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_stored_filters_metadata_by_id();
            if (checksum != 41822) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_get_stored_filters_metadata_by_id` checksum `41822`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_install_custom_filter_from_string();
            if (checksum != 17754) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_install_custom_filter_from_string` checksum `17754`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_install_custom_filter_list();
            if (checksum != 59518) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_install_custom_filter_list` checksum `59518`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_install_filter_lists();
            if (checksum != 59552) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_install_filter_lists` checksum `59552`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_lift_up_database();
            if (checksum != 12772) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_lift_up_database` checksum `12772`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_pull_metadata();
            if (checksum != 8269) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_pull_metadata` checksum `8269`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_save_custom_filter_rules();
            if (checksum != 60344) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_save_custom_filter_rules` checksum `60344`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_save_disabled_rules();
            if (checksum != 37675) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_save_disabled_rules` checksum `37675`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_save_rules_to_file_blob();
            if (checksum != 49193) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_save_rules_to_file_blob` checksum `49193`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_set_proxy_mode();
            if (checksum != 26774) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_set_proxy_mode` checksum `26774`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_update_custom_filter_metadata();
            if (checksum != 31826) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_update_custom_filter_metadata` checksum `31826`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_update_filters();
            if (checksum != 2861) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_method_filterlistmanager_update_filters` checksum `2861`, library returned `{checksum}`");
            }
        }
        {
            var checksum = _UniFFILib.uniffi_filter_list_manager_ffi_checksum_constructor_filterlistmanager_new();
            if (checksum != 382) {
                throw new UniffiContractChecksumException($"com.adguard.flm: uniffi bindings expected function `uniffi_filter_list_manager_ffi_checksum_constructor_filterlistmanager_new` checksum `382`, library returned `{checksum}`");
            }
        }
    }
}

// Public interface members begin here.

#pragma warning disable 8625




class FfiConverterInt32: FfiConverter<int, int> {
    public static FfiConverterInt32 INSTANCE = new FfiConverterInt32();

    public override int Lift(int value) {
        return value;
    }

    public override int Read(BigEndianStream stream) {
        return stream.ReadInt();
    }

    public override int Lower(int value) {
        return value;
    }

    public override int AllocationSize(int value) {
        return 4;
    }

    public override void Write(int value, BigEndianStream stream) {
        stream.WriteInt(value);
    }
}



class FfiConverterInt64: FfiConverter<long, long> {
    public static FfiConverterInt64 INSTANCE = new FfiConverterInt64();

    public override long Lift(long value) {
        return value;
    }

    public override long Read(BigEndianStream stream) {
        return stream.ReadLong();
    }

    public override long Lower(long value) {
        return value;
    }

    public override int AllocationSize(long value) {
        return 8;
    }

    public override void Write(long value, BigEndianStream stream) {
        stream.WriteLong(value);
    }
}



class FfiConverterBoolean: FfiConverter<bool, sbyte> {
    public static FfiConverterBoolean INSTANCE = new FfiConverterBoolean();

    public override bool Lift(sbyte value) {
        return value != 0;
    }

    public override bool Read(BigEndianStream stream) {
        return Lift(stream.ReadSByte());
    }

    public override sbyte Lower(bool value) {
        return value ? (sbyte)1 : (sbyte)0;
    }

    public override int AllocationSize(bool value) {
        return (sbyte)1;
    }

    public override void Write(bool value, BigEndianStream stream) {
        stream.WriteSByte(Lower(value));
    }
}



class FfiConverterString: FfiConverter<string, RustBuffer> {
    public static FfiConverterString INSTANCE = new FfiConverterString();

    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    public override string Lift(RustBuffer value) {
        try {
            var bytes = value.AsStream().ReadBytes(value.len);
            return System.Text.Encoding.UTF8.GetString(bytes);
        } finally {
            RustBuffer.Free(value);
        }
    }

    public override string Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var bytes = stream.ReadBytes(length);
        return System.Text.Encoding.UTF8.GetString(bytes);
    }

    public override RustBuffer Lower(string value) {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        var rbuf = RustBuffer.Alloc(bytes.Length);
        rbuf.AsWriteableStream().WriteBytes(bytes);
        return rbuf;
    }

    // TODO(CS)
    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    public override int AllocationSize(string value) {
        const int sizeForLength = 4;
        var sizeForString = value.Length * 3;
        return sizeForLength + sizeForString;
    }

    public override void Write(string value, BigEndianStream stream) {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        stream.WriteInt(bytes.Length);
        stream.WriteBytes(bytes);
    }
}




// `SafeHandle` implements the semantics outlined below, i.e. its thread safe, and the dispose
// method will only be called once, once all outstanding native calls have completed.
// https://github.com/mozilla/uniffi-rs/blob/0dc031132d9493ca812c3af6e7dd60ad2ea95bf0/uniffi_bindgen/src/bindings/kotlin/templates/ObjectRuntime.kt#L31
// https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.criticalhandle

internal abstract class FFIObject<THandle>: IDisposable where THandle : FFISafeHandle {
    private THandle handle;

    public FFIObject(THandle handle) {
        this.handle = handle;
    }

    public THandle GetHandle() {
        return handle;
    }

    public void Dispose() {
        handle.Dispose();
    }
}

internal abstract class FFISafeHandle: SafeHandle {
    public FFISafeHandle(): base(new IntPtr(0), true) {
    }

    public FFISafeHandle(IntPtr pointer): this() {
        this.SetHandle(pointer);
    }

    public override bool IsInvalid {
        get {
            return handle.ToInt64() == 0;
        }
    }

    // TODO(CS) this completely breaks any guarantees offered by SafeHandle.. Extracting
    // raw value from SafeHandle puts responsiblity on the consumer of this function to
    // ensure that SafeHandle outlives the stream, and anyone who might have read the raw
    // value from the stream and are holding onto it. Otherwise, the result might be a use
    // after free, or free while method calls are still in flight.
    //
    // This is also relevant for Kotlin.
    //
    public IntPtr DangerousGetRawFfiValue() {
        return handle;
    }
}

static class FFIObjectUtil {
    public static void DisposeAll(params Object?[] list) {
        foreach (var obj in list) {
            Dispose(obj);
        }
    }

    // Dispose is implemented by recursive type inspection at runtime. This is because
    // generating correct Dispose calls for recursive complex types, e.g. List<List<int>>
    // is quite cumbersome.
    private static void Dispose(dynamic? obj) {
        if (obj == null) {
            return;
        }

        if (obj is IDisposable disposable) {
            disposable.Dispose();
            return;
        }

        var type = obj.GetType();
        if (type != null) {
            if (type.IsGenericType) {
                if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))) {
                    foreach (var value in obj) {
                        Dispose(value);
                    }
                } else if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(Dictionary<,>))) {
                    foreach (var value in obj.Values) {
                        Dispose(value);
                    }
                }
            }
        }
    }
}
internal interface IFilterListManager {
    
    /// <exception cref="AgOuterException"></exception>
    bool ChangeLocale(String @suggestedLocale);
    
    /// <exception cref="AgOuterException"></exception>
    long DeleteCustomFilterLists(List<int> @ids);
    
    /// <exception cref="AgOuterException"></exception>
    long EnableFilterLists(List<int> @ids, bool @isEnabled);
    
    /// <exception cref="AgOuterException"></exception>
    FilterListMetadata FetchFilterListMetadata(String @url);
    
    /// <exception cref="AgOuterException"></exception>
    FilterListMetadataWithBody FetchFilterListMetadataWithBody(String @url);
    
    /// <exception cref="AgOuterException"></exception>
    UpdateResult? ForceUpdateFiltersByIds(List<int> @ids, int @looseTimeout);
    
    /// <exception cref="AgOuterException"></exception>
    List<ActiveRulesInfo> GetActiveRules();
    
    /// <exception cref="AgOuterException"></exception>
    List<FilterGroup> GetAllGroups();
    
    /// <exception cref="AgOuterException"></exception>
    List<FilterTag> GetAllTags();
    
    /// <exception cref="AgOuterException"></exception>
    String GetDatabasePath();
    
    /// <exception cref="AgOuterException"></exception>
    int? GetDatabaseVersion();
    
    /// <exception cref="AgOuterException"></exception>
    List<DisabledRulesRaw> GetDisabledRules(List<int> @ids);
    
    /// <exception cref="AgOuterException"></exception>
    List<FilterListRulesRaw> GetFilterRulesAsStrings(List<int> @ids);
    
    /// <exception cref="AgOuterException"></exception>
    FullFilterList? GetFullFilterListById(int @id);
    
    /// <exception cref="AgOuterException"></exception>
    List<RulesCountByFilter> GetRulesCount(List<int> @ids);
    
    /// <exception cref="AgOuterException"></exception>
    List<StoredFilterMetadata> GetStoredFiltersMetadata();
    
    /// <exception cref="AgOuterException"></exception>
    StoredFilterMetadata? GetStoredFiltersMetadataById(int @id);
    
    /// <exception cref="AgOuterException"></exception>
    FullFilterList InstallCustomFilterFromString(String @downloadUrl, long @lastDownloadTime, bool @isEnabled, bool @isTrusted, String @filterBody, String? @customTitle, String? @customDescription);
    
    /// <exception cref="AgOuterException"></exception>
    FullFilterList InstallCustomFilterList(String @downloadUrl, bool @isTrusted, String? @title, String? @description);
    
    /// <exception cref="AgOuterException"></exception>
    long InstallFilterLists(List<int> @ids, bool @isInstalled);
    
    /// <exception cref="AgOuterException"></exception>
    void LiftUpDatabase();
    
    /// <exception cref="AgOuterException"></exception>
    void PullMetadata();
    
    /// <exception cref="AgOuterException"></exception>
    void SaveCustomFilterRules(FilterListRules @rules);
    
    /// <exception cref="AgOuterException"></exception>
    void SaveDisabledRules(int @filterId, List<String> @disabledRules);
    
    /// <exception cref="AgOuterException"></exception>
    void SaveRulesToFileBlob(int @filterId, String @filePath);
    
    /// <exception cref="AgOuterException"></exception>
    void SetProxyMode(RequestProxyMode @requestProxyMode);
    
    /// <exception cref="AgOuterException"></exception>
    bool UpdateCustomFilterMetadata(int @filterId, String @title, bool @isTrusted);
    
    /// <exception cref="AgOuterException"></exception>
    UpdateResult? UpdateFilters(bool @ignoreFiltersExpiration, int @looseTimeout, bool @ignoreFiltersStatus);
    
}

internal class FilterListManagerSafeHandle: FFISafeHandle {
    public FilterListManagerSafeHandle(): base() {
    }
    public FilterListManagerSafeHandle(IntPtr pointer): base(pointer) {
    }
    override protected bool ReleaseHandle() {
        _UniffiHelpers.RustCall((ref RustCallStatus status) => {
            _UniFFILib.uniffi_filter_list_manager_ffi_fn_free_filterlistmanager(this.handle, ref status);
        });
        return true;
    }
}
internal class FilterListManager: FFIObject<FilterListManagerSafeHandle>, IFilterListManager {
    public FilterListManager(FilterListManagerSafeHandle pointer): base(pointer) {}
    public FilterListManager(Configuration @configuration) :
        this(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_constructor_filterlistmanager_new(FfiConverterTypeConfiguration.INSTANCE.Lower(@configuration), ref _status)
)) {}

    
    /// <exception cref="AgOuterException"></exception>
    public bool ChangeLocale(String @suggestedLocale) {
        return FfiConverterBoolean.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_change_locale(this.GetHandle(), FfiConverterString.INSTANCE.Lower(@suggestedLocale), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public long DeleteCustomFilterLists(List<int> @ids) {
        return FfiConverterInt64.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_delete_custom_filter_lists(this.GetHandle(), FfiConverterSequenceInt32.INSTANCE.Lower(@ids), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public long EnableFilterLists(List<int> @ids, bool @isEnabled) {
        return FfiConverterInt64.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_enable_filter_lists(this.GetHandle(), FfiConverterSequenceInt32.INSTANCE.Lower(@ids), FfiConverterBoolean.INSTANCE.Lower(@isEnabled), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public FilterListMetadata FetchFilterListMetadata(String @url) {
        return FfiConverterTypeFilterListMetadata.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_fetch_filter_list_metadata(this.GetHandle(), FfiConverterString.INSTANCE.Lower(@url), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public FilterListMetadataWithBody FetchFilterListMetadataWithBody(String @url) {
        return FfiConverterTypeFilterListMetadataWithBody.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_fetch_filter_list_metadata_with_body(this.GetHandle(), FfiConverterString.INSTANCE.Lower(@url), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public UpdateResult? ForceUpdateFiltersByIds(List<int> @ids, int @looseTimeout) {
        return FfiConverterOptionalTypeUpdateResult.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_force_update_filters_by_ids(this.GetHandle(), FfiConverterSequenceInt32.INSTANCE.Lower(@ids), FfiConverterInt32.INSTANCE.Lower(@looseTimeout), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public List<ActiveRulesInfo> GetActiveRules() {
        return FfiConverterSequenceTypeActiveRulesInfo.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_active_rules(this.GetHandle(),  ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public List<FilterGroup> GetAllGroups() {
        return FfiConverterSequenceTypeFilterGroup.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_all_groups(this.GetHandle(),  ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public List<FilterTag> GetAllTags() {
        return FfiConverterSequenceTypeFilterTag.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_all_tags(this.GetHandle(),  ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public String GetDatabasePath() {
        return FfiConverterString.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_database_path(this.GetHandle(),  ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public int? GetDatabaseVersion() {
        return FfiConverterOptionalInt32.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_database_version(this.GetHandle(),  ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public List<DisabledRulesRaw> GetDisabledRules(List<int> @ids) {
        return FfiConverterSequenceTypeDisabledRulesRaw.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_disabled_rules(this.GetHandle(), FfiConverterSequenceInt32.INSTANCE.Lower(@ids), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public List<FilterListRulesRaw> GetFilterRulesAsStrings(List<int> @ids) {
        return FfiConverterSequenceTypeFilterListRulesRaw.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_filter_rules_as_strings(this.GetHandle(), FfiConverterSequenceInt32.INSTANCE.Lower(@ids), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public FullFilterList? GetFullFilterListById(int @id) {
        return FfiConverterOptionalTypeFullFilterList.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_full_filter_list_by_id(this.GetHandle(), FfiConverterInt32.INSTANCE.Lower(@id), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public List<RulesCountByFilter> GetRulesCount(List<int> @ids) {
        return FfiConverterSequenceTypeRulesCountByFilter.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_rules_count(this.GetHandle(), FfiConverterSequenceInt32.INSTANCE.Lower(@ids), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public List<StoredFilterMetadata> GetStoredFiltersMetadata() {
        return FfiConverterSequenceTypeStoredFilterMetadata.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_stored_filters_metadata(this.GetHandle(),  ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public StoredFilterMetadata? GetStoredFiltersMetadataById(int @id) {
        return FfiConverterOptionalTypeStoredFilterMetadata.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_get_stored_filters_metadata_by_id(this.GetHandle(), FfiConverterInt32.INSTANCE.Lower(@id), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public FullFilterList InstallCustomFilterFromString(String @downloadUrl, long @lastDownloadTime, bool @isEnabled, bool @isTrusted, String @filterBody, String? @customTitle, String? @customDescription) {
        return FfiConverterTypeFullFilterList.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_install_custom_filter_from_string(this.GetHandle(), FfiConverterString.INSTANCE.Lower(@downloadUrl), FfiConverterInt64.INSTANCE.Lower(@lastDownloadTime), FfiConverterBoolean.INSTANCE.Lower(@isEnabled), FfiConverterBoolean.INSTANCE.Lower(@isTrusted), FfiConverterString.INSTANCE.Lower(@filterBody), FfiConverterOptionalString.INSTANCE.Lower(@customTitle), FfiConverterOptionalString.INSTANCE.Lower(@customDescription), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public FullFilterList InstallCustomFilterList(String @downloadUrl, bool @isTrusted, String? @title, String? @description) {
        return FfiConverterTypeFullFilterList.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_install_custom_filter_list(this.GetHandle(), FfiConverterString.INSTANCE.Lower(@downloadUrl), FfiConverterBoolean.INSTANCE.Lower(@isTrusted), FfiConverterOptionalString.INSTANCE.Lower(@title), FfiConverterOptionalString.INSTANCE.Lower(@description), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public long InstallFilterLists(List<int> @ids, bool @isInstalled) {
        return FfiConverterInt64.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_install_filter_lists(this.GetHandle(), FfiConverterSequenceInt32.INSTANCE.Lower(@ids), FfiConverterBoolean.INSTANCE.Lower(@isInstalled), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public void LiftUpDatabase() {
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_lift_up_database(this.GetHandle(),  ref _status)
);
    }
    
    
    /// <exception cref="AgOuterException"></exception>
    public void PullMetadata() {
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_pull_metadata(this.GetHandle(),  ref _status)
);
    }
    
    
    /// <exception cref="AgOuterException"></exception>
    public void SaveCustomFilterRules(FilterListRules @rules) {
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_save_custom_filter_rules(this.GetHandle(), FfiConverterTypeFilterListRules.INSTANCE.Lower(@rules), ref _status)
);
    }
    
    
    /// <exception cref="AgOuterException"></exception>
    public void SaveDisabledRules(int @filterId, List<String> @disabledRules) {
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_save_disabled_rules(this.GetHandle(), FfiConverterInt32.INSTANCE.Lower(@filterId), FfiConverterSequenceString.INSTANCE.Lower(@disabledRules), ref _status)
);
    }
    
    
    /// <exception cref="AgOuterException"></exception>
    public void SaveRulesToFileBlob(int @filterId, String @filePath) {
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_save_rules_to_file_blob(this.GetHandle(), FfiConverterInt32.INSTANCE.Lower(@filterId), FfiConverterString.INSTANCE.Lower(@filePath), ref _status)
);
    }
    
    
    /// <exception cref="AgOuterException"></exception>
    public void SetProxyMode(RequestProxyMode @requestProxyMode) {
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_set_proxy_mode(this.GetHandle(), FfiConverterTypeRequestProxyMode.INSTANCE.Lower(@requestProxyMode), ref _status)
);
    }
    
    
    /// <exception cref="AgOuterException"></exception>
    public bool UpdateCustomFilterMetadata(int @filterId, String @title, bool @isTrusted) {
        return FfiConverterBoolean.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_update_custom_filter_metadata(this.GetHandle(), FfiConverterInt32.INSTANCE.Lower(@filterId), FfiConverterString.INSTANCE.Lower(@title), FfiConverterBoolean.INSTANCE.Lower(@isTrusted), ref _status)
));
    }
    
    /// <exception cref="AgOuterException"></exception>
    public UpdateResult? UpdateFilters(bool @ignoreFiltersExpiration, int @looseTimeout, bool @ignoreFiltersStatus) {
        return FfiConverterOptionalTypeUpdateResult.INSTANCE.Lift(
    _UniffiHelpers.RustCallWithError(FfiConverterTypeAgOuterException.INSTANCE, (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_method_filterlistmanager_update_filters(this.GetHandle(), FfiConverterBoolean.INSTANCE.Lower(@ignoreFiltersExpiration), FfiConverterInt32.INSTANCE.Lower(@looseTimeout), FfiConverterBoolean.INSTANCE.Lower(@ignoreFiltersStatus), ref _status)
));
    }
    

    
}

class FfiConverterTypeFilterListManager: FfiConverter<FilterListManager, FilterListManagerSafeHandle> {
    public static FfiConverterTypeFilterListManager INSTANCE = new FfiConverterTypeFilterListManager();

    public override FilterListManagerSafeHandle Lower(FilterListManager value) {
        return value.GetHandle();
    }

    public override FilterListManager Lift(FilterListManagerSafeHandle value) {
        return new FilterListManager(value);
    }

    public override FilterListManager Read(BigEndianStream stream) {
        return Lift(new FilterListManagerSafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(FilterListManager value) {
        return 8;
    }

    public override void Write(FilterListManager value, BigEndianStream stream) {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}



internal record ActiveRulesInfo (
    int @filterId, 
    int @groupId, 
    bool @isTrusted, 
    List<String> @rules
) {
}

class FfiConverterTypeActiveRulesInfo: FfiConverterRustBuffer<ActiveRulesInfo> {
    public static FfiConverterTypeActiveRulesInfo INSTANCE = new FfiConverterTypeActiveRulesInfo();

    public override ActiveRulesInfo Read(BigEndianStream stream) {
        return new ActiveRulesInfo(
            @filterId: FfiConverterInt32.INSTANCE.Read(stream),
            @groupId: FfiConverterInt32.INSTANCE.Read(stream),
            @isTrusted: FfiConverterBoolean.INSTANCE.Read(stream),
            @rules: FfiConverterSequenceString.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(ActiveRulesInfo value) {
        return
            FfiConverterInt32.INSTANCE.AllocationSize(value.@filterId) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@groupId) +
            FfiConverterBoolean.INSTANCE.AllocationSize(value.@isTrusted) +
            FfiConverterSequenceString.INSTANCE.AllocationSize(value.@rules);
    }

    public override void Write(ActiveRulesInfo value, BigEndianStream stream) {
            FfiConverterInt32.INSTANCE.Write(value.@filterId, stream);
            FfiConverterInt32.INSTANCE.Write(value.@groupId, stream);
            FfiConverterBoolean.INSTANCE.Write(value.@isTrusted, stream);
            FfiConverterSequenceString.INSTANCE.Write(value.@rules, stream);
    }
}



internal record Configuration (
    FilterListType @filterListType, 
    String? @workingDirectory, 
    String @locale, 
    int @defaultFilterListExpiresPeriodSec, 
    List<String>? @compilerConditionalConstants, 
    String @metadataUrl, 
    String @metadataLocalesUrl, 
    int @requestTimeoutMs, 
    RequestProxyMode @requestProxyMode, 
    bool @autoLiftUpDatabase, 
    String @appName, 
    String @version
) {
}

class FfiConverterTypeConfiguration: FfiConverterRustBuffer<Configuration> {
    public static FfiConverterTypeConfiguration INSTANCE = new FfiConverterTypeConfiguration();

    public override Configuration Read(BigEndianStream stream) {
        return new Configuration(
            @filterListType: FfiConverterTypeFilterListType.INSTANCE.Read(stream),
            @workingDirectory: FfiConverterOptionalString.INSTANCE.Read(stream),
            @locale: FfiConverterString.INSTANCE.Read(stream),
            @defaultFilterListExpiresPeriodSec: FfiConverterInt32.INSTANCE.Read(stream),
            @compilerConditionalConstants: FfiConverterOptionalSequenceString.INSTANCE.Read(stream),
            @metadataUrl: FfiConverterString.INSTANCE.Read(stream),
            @metadataLocalesUrl: FfiConverterString.INSTANCE.Read(stream),
            @requestTimeoutMs: FfiConverterInt32.INSTANCE.Read(stream),
            @requestProxyMode: FfiConverterTypeRequestProxyMode.INSTANCE.Read(stream),
            @autoLiftUpDatabase: FfiConverterBoolean.INSTANCE.Read(stream),
            @appName: FfiConverterString.INSTANCE.Read(stream),
            @version: FfiConverterString.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(Configuration value) {
        return
            FfiConverterTypeFilterListType.INSTANCE.AllocationSize(value.@filterListType) +
            FfiConverterOptionalString.INSTANCE.AllocationSize(value.@workingDirectory) +
            FfiConverterString.INSTANCE.AllocationSize(value.@locale) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@defaultFilterListExpiresPeriodSec) +
            FfiConverterOptionalSequenceString.INSTANCE.AllocationSize(value.@compilerConditionalConstants) +
            FfiConverterString.INSTANCE.AllocationSize(value.@metadataUrl) +
            FfiConverterString.INSTANCE.AllocationSize(value.@metadataLocalesUrl) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@requestTimeoutMs) +
            FfiConverterTypeRequestProxyMode.INSTANCE.AllocationSize(value.@requestProxyMode) +
            FfiConverterBoolean.INSTANCE.AllocationSize(value.@autoLiftUpDatabase) +
            FfiConverterString.INSTANCE.AllocationSize(value.@appName) +
            FfiConverterString.INSTANCE.AllocationSize(value.@version);
    }

    public override void Write(Configuration value, BigEndianStream stream) {
            FfiConverterTypeFilterListType.INSTANCE.Write(value.@filterListType, stream);
            FfiConverterOptionalString.INSTANCE.Write(value.@workingDirectory, stream);
            FfiConverterString.INSTANCE.Write(value.@locale, stream);
            FfiConverterInt32.INSTANCE.Write(value.@defaultFilterListExpiresPeriodSec, stream);
            FfiConverterOptionalSequenceString.INSTANCE.Write(value.@compilerConditionalConstants, stream);
            FfiConverterString.INSTANCE.Write(value.@metadataUrl, stream);
            FfiConverterString.INSTANCE.Write(value.@metadataLocalesUrl, stream);
            FfiConverterInt32.INSTANCE.Write(value.@requestTimeoutMs, stream);
            FfiConverterTypeRequestProxyMode.INSTANCE.Write(value.@requestProxyMode, stream);
            FfiConverterBoolean.INSTANCE.Write(value.@autoLiftUpDatabase, stream);
            FfiConverterString.INSTANCE.Write(value.@appName, stream);
            FfiConverterString.INSTANCE.Write(value.@version, stream);
    }
}



internal record DisabledRulesRaw (
    int @filterId, 
    String @text
) {
}

class FfiConverterTypeDisabledRulesRaw: FfiConverterRustBuffer<DisabledRulesRaw> {
    public static FfiConverterTypeDisabledRulesRaw INSTANCE = new FfiConverterTypeDisabledRulesRaw();

    public override DisabledRulesRaw Read(BigEndianStream stream) {
        return new DisabledRulesRaw(
            @filterId: FfiConverterInt32.INSTANCE.Read(stream),
            @text: FfiConverterString.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(DisabledRulesRaw value) {
        return
            FfiConverterInt32.INSTANCE.AllocationSize(value.@filterId) +
            FfiConverterString.INSTANCE.AllocationSize(value.@text);
    }

    public override void Write(DisabledRulesRaw value, BigEndianStream stream) {
            FfiConverterInt32.INSTANCE.Write(value.@filterId, stream);
            FfiConverterString.INSTANCE.Write(value.@text, stream);
    }
}



internal record FilterGroup (
    int @id, 
    String @name, 
    int @displayNumber
) {
}

class FfiConverterTypeFilterGroup: FfiConverterRustBuffer<FilterGroup> {
    public static FfiConverterTypeFilterGroup INSTANCE = new FfiConverterTypeFilterGroup();

    public override FilterGroup Read(BigEndianStream stream) {
        return new FilterGroup(
            @id: FfiConverterInt32.INSTANCE.Read(stream),
            @name: FfiConverterString.INSTANCE.Read(stream),
            @displayNumber: FfiConverterInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(FilterGroup value) {
        return
            FfiConverterInt32.INSTANCE.AllocationSize(value.@id) +
            FfiConverterString.INSTANCE.AllocationSize(value.@name) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@displayNumber);
    }

    public override void Write(FilterGroup value, BigEndianStream stream) {
            FfiConverterInt32.INSTANCE.Write(value.@id, stream);
            FfiConverterString.INSTANCE.Write(value.@name, stream);
            FfiConverterInt32.INSTANCE.Write(value.@displayNumber, stream);
    }
}



internal record FilterListManagerConstants (
    int @userRulesId, 
    int @customGroupId, 
    int @specialGroupId, 
    int @smallestFilterId
) {
}

class FfiConverterTypeFilterListManagerConstants: FfiConverterRustBuffer<FilterListManagerConstants> {
    public static FfiConverterTypeFilterListManagerConstants INSTANCE = new FfiConverterTypeFilterListManagerConstants();

    public override FilterListManagerConstants Read(BigEndianStream stream) {
        return new FilterListManagerConstants(
            @userRulesId: FfiConverterInt32.INSTANCE.Read(stream),
            @customGroupId: FfiConverterInt32.INSTANCE.Read(stream),
            @specialGroupId: FfiConverterInt32.INSTANCE.Read(stream),
            @smallestFilterId: FfiConverterInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(FilterListManagerConstants value) {
        return
            FfiConverterInt32.INSTANCE.AllocationSize(value.@userRulesId) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@customGroupId) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@specialGroupId) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@smallestFilterId);
    }

    public override void Write(FilterListManagerConstants value, BigEndianStream stream) {
            FfiConverterInt32.INSTANCE.Write(value.@userRulesId, stream);
            FfiConverterInt32.INSTANCE.Write(value.@customGroupId, stream);
            FfiConverterInt32.INSTANCE.Write(value.@specialGroupId, stream);
            FfiConverterInt32.INSTANCE.Write(value.@smallestFilterId, stream);
    }
}



internal record FilterListMetadata (
    String @title, 
    String @description, 
    String @timeUpdated, 
    String @version, 
    String @homepage, 
    String @license, 
    String @checksum, 
    String @url, 
    int @rulesCount
) {
}

class FfiConverterTypeFilterListMetadata: FfiConverterRustBuffer<FilterListMetadata> {
    public static FfiConverterTypeFilterListMetadata INSTANCE = new FfiConverterTypeFilterListMetadata();

    public override FilterListMetadata Read(BigEndianStream stream) {
        return new FilterListMetadata(
            @title: FfiConverterString.INSTANCE.Read(stream),
            @description: FfiConverterString.INSTANCE.Read(stream),
            @timeUpdated: FfiConverterString.INSTANCE.Read(stream),
            @version: FfiConverterString.INSTANCE.Read(stream),
            @homepage: FfiConverterString.INSTANCE.Read(stream),
            @license: FfiConverterString.INSTANCE.Read(stream),
            @checksum: FfiConverterString.INSTANCE.Read(stream),
            @url: FfiConverterString.INSTANCE.Read(stream),
            @rulesCount: FfiConverterInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(FilterListMetadata value) {
        return
            FfiConverterString.INSTANCE.AllocationSize(value.@title) +
            FfiConverterString.INSTANCE.AllocationSize(value.@description) +
            FfiConverterString.INSTANCE.AllocationSize(value.@timeUpdated) +
            FfiConverterString.INSTANCE.AllocationSize(value.@version) +
            FfiConverterString.INSTANCE.AllocationSize(value.@homepage) +
            FfiConverterString.INSTANCE.AllocationSize(value.@license) +
            FfiConverterString.INSTANCE.AllocationSize(value.@checksum) +
            FfiConverterString.INSTANCE.AllocationSize(value.@url) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@rulesCount);
    }

    public override void Write(FilterListMetadata value, BigEndianStream stream) {
            FfiConverterString.INSTANCE.Write(value.@title, stream);
            FfiConverterString.INSTANCE.Write(value.@description, stream);
            FfiConverterString.INSTANCE.Write(value.@timeUpdated, stream);
            FfiConverterString.INSTANCE.Write(value.@version, stream);
            FfiConverterString.INSTANCE.Write(value.@homepage, stream);
            FfiConverterString.INSTANCE.Write(value.@license, stream);
            FfiConverterString.INSTANCE.Write(value.@checksum, stream);
            FfiConverterString.INSTANCE.Write(value.@url, stream);
            FfiConverterInt32.INSTANCE.Write(value.@rulesCount, stream);
    }
}



internal record FilterListMetadataWithBody (
    FilterListMetadata @metadata, 
    String @filterBody
) {
}

class FfiConverterTypeFilterListMetadataWithBody: FfiConverterRustBuffer<FilterListMetadataWithBody> {
    public static FfiConverterTypeFilterListMetadataWithBody INSTANCE = new FfiConverterTypeFilterListMetadataWithBody();

    public override FilterListMetadataWithBody Read(BigEndianStream stream) {
        return new FilterListMetadataWithBody(
            @metadata: FfiConverterTypeFilterListMetadata.INSTANCE.Read(stream),
            @filterBody: FfiConverterString.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(FilterListMetadataWithBody value) {
        return
            FfiConverterTypeFilterListMetadata.INSTANCE.AllocationSize(value.@metadata) +
            FfiConverterString.INSTANCE.AllocationSize(value.@filterBody);
    }

    public override void Write(FilterListMetadataWithBody value, BigEndianStream stream) {
            FfiConverterTypeFilterListMetadata.INSTANCE.Write(value.@metadata, stream);
            FfiConverterString.INSTANCE.Write(value.@filterBody, stream);
    }
}



internal record FilterListRules (
    int @filterId, 
    List<String> @rules, 
    List<String> @disabledRules, 
    int @rulesCount
) {
}

class FfiConverterTypeFilterListRules: FfiConverterRustBuffer<FilterListRules> {
    public static FfiConverterTypeFilterListRules INSTANCE = new FfiConverterTypeFilterListRules();

    public override FilterListRules Read(BigEndianStream stream) {
        return new FilterListRules(
            @filterId: FfiConverterInt32.INSTANCE.Read(stream),
            @rules: FfiConverterSequenceString.INSTANCE.Read(stream),
            @disabledRules: FfiConverterSequenceString.INSTANCE.Read(stream),
            @rulesCount: FfiConverterInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(FilterListRules value) {
        return
            FfiConverterInt32.INSTANCE.AllocationSize(value.@filterId) +
            FfiConverterSequenceString.INSTANCE.AllocationSize(value.@rules) +
            FfiConverterSequenceString.INSTANCE.AllocationSize(value.@disabledRules) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@rulesCount);
    }

    public override void Write(FilterListRules value, BigEndianStream stream) {
            FfiConverterInt32.INSTANCE.Write(value.@filterId, stream);
            FfiConverterSequenceString.INSTANCE.Write(value.@rules, stream);
            FfiConverterSequenceString.INSTANCE.Write(value.@disabledRules, stream);
            FfiConverterInt32.INSTANCE.Write(value.@rulesCount, stream);
    }
}



internal record FilterListRulesRaw (
    int @filterId, 
    String @rules, 
    String @disabledRules, 
    int @rulesCount
) {
}

class FfiConverterTypeFilterListRulesRaw: FfiConverterRustBuffer<FilterListRulesRaw> {
    public static FfiConverterTypeFilterListRulesRaw INSTANCE = new FfiConverterTypeFilterListRulesRaw();

    public override FilterListRulesRaw Read(BigEndianStream stream) {
        return new FilterListRulesRaw(
            @filterId: FfiConverterInt32.INSTANCE.Read(stream),
            @rules: FfiConverterString.INSTANCE.Read(stream),
            @disabledRules: FfiConverterString.INSTANCE.Read(stream),
            @rulesCount: FfiConverterInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(FilterListRulesRaw value) {
        return
            FfiConverterInt32.INSTANCE.AllocationSize(value.@filterId) +
            FfiConverterString.INSTANCE.AllocationSize(value.@rules) +
            FfiConverterString.INSTANCE.AllocationSize(value.@disabledRules) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@rulesCount);
    }

    public override void Write(FilterListRulesRaw value, BigEndianStream stream) {
            FfiConverterInt32.INSTANCE.Write(value.@filterId, stream);
            FfiConverterString.INSTANCE.Write(value.@rules, stream);
            FfiConverterString.INSTANCE.Write(value.@disabledRules, stream);
            FfiConverterInt32.INSTANCE.Write(value.@rulesCount, stream);
    }
}



internal record FilterTag (
    int @id, 
    String @keyword
) {
}

class FfiConverterTypeFilterTag: FfiConverterRustBuffer<FilterTag> {
    public static FfiConverterTypeFilterTag INSTANCE = new FfiConverterTypeFilterTag();

    public override FilterTag Read(BigEndianStream stream) {
        return new FilterTag(
            @id: FfiConverterInt32.INSTANCE.Read(stream),
            @keyword: FfiConverterString.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(FilterTag value) {
        return
            FfiConverterInt32.INSTANCE.AllocationSize(value.@id) +
            FfiConverterString.INSTANCE.AllocationSize(value.@keyword);
    }

    public override void Write(FilterTag value, BigEndianStream stream) {
            FfiConverterInt32.INSTANCE.Write(value.@id, stream);
            FfiConverterString.INSTANCE.Write(value.@keyword, stream);
    }
}



internal record FullFilterList (
    int @id, 
    int @groupId, 
    long @timeUpdated, 
    long @lastDownloadTime, 
    String @title, 
    String @description, 
    String @version, 
    int @displayNumber, 
    String @downloadUrl, 
    String @subscriptionUrl, 
    List<FilterTag> @tags, 
    int @expires, 
    bool @isTrusted, 
    bool @isCustom, 
    bool @isEnabled, 
    bool @isInstalled, 
    String @homepage, 
    String @license, 
    String @checksum, 
    List<String> @languages, 
    FilterListRules? @rules
) {
}

class FfiConverterTypeFullFilterList: FfiConverterRustBuffer<FullFilterList> {
    public static FfiConverterTypeFullFilterList INSTANCE = new FfiConverterTypeFullFilterList();

    public override FullFilterList Read(BigEndianStream stream) {
        return new FullFilterList(
            @id: FfiConverterInt32.INSTANCE.Read(stream),
            @groupId: FfiConverterInt32.INSTANCE.Read(stream),
            @timeUpdated: FfiConverterInt64.INSTANCE.Read(stream),
            @lastDownloadTime: FfiConverterInt64.INSTANCE.Read(stream),
            @title: FfiConverterString.INSTANCE.Read(stream),
            @description: FfiConverterString.INSTANCE.Read(stream),
            @version: FfiConverterString.INSTANCE.Read(stream),
            @displayNumber: FfiConverterInt32.INSTANCE.Read(stream),
            @downloadUrl: FfiConverterString.INSTANCE.Read(stream),
            @subscriptionUrl: FfiConverterString.INSTANCE.Read(stream),
            @tags: FfiConverterSequenceTypeFilterTag.INSTANCE.Read(stream),
            @expires: FfiConverterInt32.INSTANCE.Read(stream),
            @isTrusted: FfiConverterBoolean.INSTANCE.Read(stream),
            @isCustom: FfiConverterBoolean.INSTANCE.Read(stream),
            @isEnabled: FfiConverterBoolean.INSTANCE.Read(stream),
            @isInstalled: FfiConverterBoolean.INSTANCE.Read(stream),
            @homepage: FfiConverterString.INSTANCE.Read(stream),
            @license: FfiConverterString.INSTANCE.Read(stream),
            @checksum: FfiConverterString.INSTANCE.Read(stream),
            @languages: FfiConverterSequenceString.INSTANCE.Read(stream),
            @rules: FfiConverterOptionalTypeFilterListRules.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(FullFilterList value) {
        return
            FfiConverterInt32.INSTANCE.AllocationSize(value.@id) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@groupId) +
            FfiConverterInt64.INSTANCE.AllocationSize(value.@timeUpdated) +
            FfiConverterInt64.INSTANCE.AllocationSize(value.@lastDownloadTime) +
            FfiConverterString.INSTANCE.AllocationSize(value.@title) +
            FfiConverterString.INSTANCE.AllocationSize(value.@description) +
            FfiConverterString.INSTANCE.AllocationSize(value.@version) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@displayNumber) +
            FfiConverterString.INSTANCE.AllocationSize(value.@downloadUrl) +
            FfiConverterString.INSTANCE.AllocationSize(value.@subscriptionUrl) +
            FfiConverterSequenceTypeFilterTag.INSTANCE.AllocationSize(value.@tags) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@expires) +
            FfiConverterBoolean.INSTANCE.AllocationSize(value.@isTrusted) +
            FfiConverterBoolean.INSTANCE.AllocationSize(value.@isCustom) +
            FfiConverterBoolean.INSTANCE.AllocationSize(value.@isEnabled) +
            FfiConverterBoolean.INSTANCE.AllocationSize(value.@isInstalled) +
            FfiConverterString.INSTANCE.AllocationSize(value.@homepage) +
            FfiConverterString.INSTANCE.AllocationSize(value.@license) +
            FfiConverterString.INSTANCE.AllocationSize(value.@checksum) +
            FfiConverterSequenceString.INSTANCE.AllocationSize(value.@languages) +
            FfiConverterOptionalTypeFilterListRules.INSTANCE.AllocationSize(value.@rules);
    }

    public override void Write(FullFilterList value, BigEndianStream stream) {
            FfiConverterInt32.INSTANCE.Write(value.@id, stream);
            FfiConverterInt32.INSTANCE.Write(value.@groupId, stream);
            FfiConverterInt64.INSTANCE.Write(value.@timeUpdated, stream);
            FfiConverterInt64.INSTANCE.Write(value.@lastDownloadTime, stream);
            FfiConverterString.INSTANCE.Write(value.@title, stream);
            FfiConverterString.INSTANCE.Write(value.@description, stream);
            FfiConverterString.INSTANCE.Write(value.@version, stream);
            FfiConverterInt32.INSTANCE.Write(value.@displayNumber, stream);
            FfiConverterString.INSTANCE.Write(value.@downloadUrl, stream);
            FfiConverterString.INSTANCE.Write(value.@subscriptionUrl, stream);
            FfiConverterSequenceTypeFilterTag.INSTANCE.Write(value.@tags, stream);
            FfiConverterInt32.INSTANCE.Write(value.@expires, stream);
            FfiConverterBoolean.INSTANCE.Write(value.@isTrusted, stream);
            FfiConverterBoolean.INSTANCE.Write(value.@isCustom, stream);
            FfiConverterBoolean.INSTANCE.Write(value.@isEnabled, stream);
            FfiConverterBoolean.INSTANCE.Write(value.@isInstalled, stream);
            FfiConverterString.INSTANCE.Write(value.@homepage, stream);
            FfiConverterString.INSTANCE.Write(value.@license, stream);
            FfiConverterString.INSTANCE.Write(value.@checksum, stream);
            FfiConverterSequenceString.INSTANCE.Write(value.@languages, stream);
            FfiConverterOptionalTypeFilterListRules.INSTANCE.Write(value.@rules, stream);
    }
}



internal record RulesCountByFilter (
    int @filterId, 
    int @rulesCount
) {
}

class FfiConverterTypeRulesCountByFilter: FfiConverterRustBuffer<RulesCountByFilter> {
    public static FfiConverterTypeRulesCountByFilter INSTANCE = new FfiConverterTypeRulesCountByFilter();

    public override RulesCountByFilter Read(BigEndianStream stream) {
        return new RulesCountByFilter(
            @filterId: FfiConverterInt32.INSTANCE.Read(stream),
            @rulesCount: FfiConverterInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(RulesCountByFilter value) {
        return
            FfiConverterInt32.INSTANCE.AllocationSize(value.@filterId) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@rulesCount);
    }

    public override void Write(RulesCountByFilter value, BigEndianStream stream) {
            FfiConverterInt32.INSTANCE.Write(value.@filterId, stream);
            FfiConverterInt32.INSTANCE.Write(value.@rulesCount, stream);
    }
}



internal record StoredFilterMetadata (
    int @id, 
    int @groupId, 
    long @timeUpdated, 
    long @lastDownloadTime, 
    String @title, 
    String @description, 
    String @version, 
    int @displayNumber, 
    String @downloadUrl, 
    String @subscriptionUrl, 
    List<FilterTag> @tags, 
    int @expires, 
    bool @isTrusted, 
    bool @isCustom, 
    bool @isEnabled, 
    bool @isInstalled, 
    String @homepage, 
    String @license, 
    String @checksum, 
    List<String> @languages
) {
}

class FfiConverterTypeStoredFilterMetadata: FfiConverterRustBuffer<StoredFilterMetadata> {
    public static FfiConverterTypeStoredFilterMetadata INSTANCE = new FfiConverterTypeStoredFilterMetadata();

    public override StoredFilterMetadata Read(BigEndianStream stream) {
        return new StoredFilterMetadata(
            @id: FfiConverterInt32.INSTANCE.Read(stream),
            @groupId: FfiConverterInt32.INSTANCE.Read(stream),
            @timeUpdated: FfiConverterInt64.INSTANCE.Read(stream),
            @lastDownloadTime: FfiConverterInt64.INSTANCE.Read(stream),
            @title: FfiConverterString.INSTANCE.Read(stream),
            @description: FfiConverterString.INSTANCE.Read(stream),
            @version: FfiConverterString.INSTANCE.Read(stream),
            @displayNumber: FfiConverterInt32.INSTANCE.Read(stream),
            @downloadUrl: FfiConverterString.INSTANCE.Read(stream),
            @subscriptionUrl: FfiConverterString.INSTANCE.Read(stream),
            @tags: FfiConverterSequenceTypeFilterTag.INSTANCE.Read(stream),
            @expires: FfiConverterInt32.INSTANCE.Read(stream),
            @isTrusted: FfiConverterBoolean.INSTANCE.Read(stream),
            @isCustom: FfiConverterBoolean.INSTANCE.Read(stream),
            @isEnabled: FfiConverterBoolean.INSTANCE.Read(stream),
            @isInstalled: FfiConverterBoolean.INSTANCE.Read(stream),
            @homepage: FfiConverterString.INSTANCE.Read(stream),
            @license: FfiConverterString.INSTANCE.Read(stream),
            @checksum: FfiConverterString.INSTANCE.Read(stream),
            @languages: FfiConverterSequenceString.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(StoredFilterMetadata value) {
        return
            FfiConverterInt32.INSTANCE.AllocationSize(value.@id) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@groupId) +
            FfiConverterInt64.INSTANCE.AllocationSize(value.@timeUpdated) +
            FfiConverterInt64.INSTANCE.AllocationSize(value.@lastDownloadTime) +
            FfiConverterString.INSTANCE.AllocationSize(value.@title) +
            FfiConverterString.INSTANCE.AllocationSize(value.@description) +
            FfiConverterString.INSTANCE.AllocationSize(value.@version) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@displayNumber) +
            FfiConverterString.INSTANCE.AllocationSize(value.@downloadUrl) +
            FfiConverterString.INSTANCE.AllocationSize(value.@subscriptionUrl) +
            FfiConverterSequenceTypeFilterTag.INSTANCE.AllocationSize(value.@tags) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@expires) +
            FfiConverterBoolean.INSTANCE.AllocationSize(value.@isTrusted) +
            FfiConverterBoolean.INSTANCE.AllocationSize(value.@isCustom) +
            FfiConverterBoolean.INSTANCE.AllocationSize(value.@isEnabled) +
            FfiConverterBoolean.INSTANCE.AllocationSize(value.@isInstalled) +
            FfiConverterString.INSTANCE.AllocationSize(value.@homepage) +
            FfiConverterString.INSTANCE.AllocationSize(value.@license) +
            FfiConverterString.INSTANCE.AllocationSize(value.@checksum) +
            FfiConverterSequenceString.INSTANCE.AllocationSize(value.@languages);
    }

    public override void Write(StoredFilterMetadata value, BigEndianStream stream) {
            FfiConverterInt32.INSTANCE.Write(value.@id, stream);
            FfiConverterInt32.INSTANCE.Write(value.@groupId, stream);
            FfiConverterInt64.INSTANCE.Write(value.@timeUpdated, stream);
            FfiConverterInt64.INSTANCE.Write(value.@lastDownloadTime, stream);
            FfiConverterString.INSTANCE.Write(value.@title, stream);
            FfiConverterString.INSTANCE.Write(value.@description, stream);
            FfiConverterString.INSTANCE.Write(value.@version, stream);
            FfiConverterInt32.INSTANCE.Write(value.@displayNumber, stream);
            FfiConverterString.INSTANCE.Write(value.@downloadUrl, stream);
            FfiConverterString.INSTANCE.Write(value.@subscriptionUrl, stream);
            FfiConverterSequenceTypeFilterTag.INSTANCE.Write(value.@tags, stream);
            FfiConverterInt32.INSTANCE.Write(value.@expires, stream);
            FfiConverterBoolean.INSTANCE.Write(value.@isTrusted, stream);
            FfiConverterBoolean.INSTANCE.Write(value.@isCustom, stream);
            FfiConverterBoolean.INSTANCE.Write(value.@isEnabled, stream);
            FfiConverterBoolean.INSTANCE.Write(value.@isInstalled, stream);
            FfiConverterString.INSTANCE.Write(value.@homepage, stream);
            FfiConverterString.INSTANCE.Write(value.@license, stream);
            FfiConverterString.INSTANCE.Write(value.@checksum, stream);
            FfiConverterSequenceString.INSTANCE.Write(value.@languages, stream);
    }
}



internal record UpdateFilterError (
    int @filterId, 
    String @message
) {
}

class FfiConverterTypeUpdateFilterError: FfiConverterRustBuffer<UpdateFilterError> {
    public static FfiConverterTypeUpdateFilterError INSTANCE = new FfiConverterTypeUpdateFilterError();

    public override UpdateFilterError Read(BigEndianStream stream) {
        return new UpdateFilterError(
            @filterId: FfiConverterInt32.INSTANCE.Read(stream),
            @message: FfiConverterString.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(UpdateFilterError value) {
        return
            FfiConverterInt32.INSTANCE.AllocationSize(value.@filterId) +
            FfiConverterString.INSTANCE.AllocationSize(value.@message);
    }

    public override void Write(UpdateFilterError value, BigEndianStream stream) {
            FfiConverterInt32.INSTANCE.Write(value.@filterId, stream);
            FfiConverterString.INSTANCE.Write(value.@message, stream);
    }
}



internal record UpdateResult (
    List<FullFilterList> @updatedList, 
    int @remainingFiltersCount, 
    List<UpdateFilterError> @filtersErrors
) {
}

class FfiConverterTypeUpdateResult: FfiConverterRustBuffer<UpdateResult> {
    public static FfiConverterTypeUpdateResult INSTANCE = new FfiConverterTypeUpdateResult();

    public override UpdateResult Read(BigEndianStream stream) {
        return new UpdateResult(
            @updatedList: FfiConverterSequenceTypeFullFilterList.INSTANCE.Read(stream),
            @remainingFiltersCount: FfiConverterInt32.INSTANCE.Read(stream),
            @filtersErrors: FfiConverterSequenceTypeUpdateFilterError.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(UpdateResult value) {
        return
            FfiConverterSequenceTypeFullFilterList.INSTANCE.AllocationSize(value.@updatedList) +
            FfiConverterInt32.INSTANCE.AllocationSize(value.@remainingFiltersCount) +
            FfiConverterSequenceTypeUpdateFilterError.INSTANCE.AllocationSize(value.@filtersErrors);
    }

    public override void Write(UpdateResult value, BigEndianStream stream) {
            FfiConverterSequenceTypeFullFilterList.INSTANCE.Write(value.@updatedList, stream);
            FfiConverterInt32.INSTANCE.Write(value.@remainingFiltersCount, stream);
            FfiConverterSequenceTypeUpdateFilterError.INSTANCE.Write(value.@filtersErrors, stream);
    }
}





internal class AgOuterException: UniffiException {
    AgOuterException(string message): base(message) {}

    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    
    public class CannotOpenDatabase: AgOuterException {
        public CannotOpenDatabase(string message): base(message) {}
    }
    
    public class NotADatabase: AgOuterException {
        public NotADatabase(string message): base(message) {}
    }
    
    public class DiskFull: AgOuterException {
        public DiskFull(string message): base(message) {}
    }
    
    public class DatabaseBusy: AgOuterException {
        public DatabaseBusy(string message): base(message) {}
    }
    
    public class EntityNotFound: AgOuterException {
        public EntityNotFound(string message): base(message) {}
    }
    
    public class PathNotFound: AgOuterException {
        public PathNotFound(string message): base(message) {}
    }
    
    public class PathHasDeniedPermission: AgOuterException {
        public PathHasDeniedPermission(string message): base(message) {}
    }
    
    public class PathAlreadyExists: AgOuterException {
        public PathAlreadyExists(string message): base(message) {}
    }
    
    public class TimedOut: AgOuterException {
        public TimedOut(string message): base(message) {}
    }
    
    public class HttpClientNetworkException: AgOuterException {
        public HttpClientNetworkException(string message): base(message) {}
    }
    
    public class HttpClientBodyRecoveryFailed: AgOuterException {
        public HttpClientBodyRecoveryFailed(string message): base(message) {}
    }
    
    public class HttpStrict200Response: AgOuterException {
        public HttpStrict200Response(string message): base(message) {}
    }
    
    public class FilterContentIsLikelyNotAFilter: AgOuterException {
        public FilterContentIsLikelyNotAFilter(string message): base(message) {}
    }
    
    public class FilterParserException: AgOuterException {
        public FilterParserException(string message): base(message) {}
    }
    
    public class FieldIsEmpty: AgOuterException {
        public FieldIsEmpty(string message): base(message) {}
    }
    
    public class Mutex: AgOuterException {
        public Mutex(string message): base(message) {}
    }
    
    public class InvalidConfiguration: AgOuterException {
        public InvalidConfiguration(string message): base(message) {}
    }
    
    public class Other: AgOuterException {
        public Other(string message): base(message) {}
    }
    
}

class FfiConverterTypeAgOuterException : FfiConverterRustBuffer<AgOuterException>, CallStatusErrorHandler<AgOuterException> {
    public static FfiConverterTypeAgOuterException INSTANCE = new FfiConverterTypeAgOuterException();

    public override AgOuterException Read(BigEndianStream stream) {
        var value = stream.ReadInt();
        switch (value) {
            case 1: return new AgOuterException.CannotOpenDatabase(FfiConverterString.INSTANCE.Read(stream));
            case 2: return new AgOuterException.NotADatabase(FfiConverterString.INSTANCE.Read(stream));
            case 3: return new AgOuterException.DiskFull(FfiConverterString.INSTANCE.Read(stream));
            case 4: return new AgOuterException.DatabaseBusy(FfiConverterString.INSTANCE.Read(stream));
            case 5: return new AgOuterException.EntityNotFound(FfiConverterString.INSTANCE.Read(stream));
            case 6: return new AgOuterException.PathNotFound(FfiConverterString.INSTANCE.Read(stream));
            case 7: return new AgOuterException.PathHasDeniedPermission(FfiConverterString.INSTANCE.Read(stream));
            case 8: return new AgOuterException.PathAlreadyExists(FfiConverterString.INSTANCE.Read(stream));
            case 9: return new AgOuterException.TimedOut(FfiConverterString.INSTANCE.Read(stream));
            case 10: return new AgOuterException.HttpClientNetworkException(FfiConverterString.INSTANCE.Read(stream));
            case 11: return new AgOuterException.HttpClientBodyRecoveryFailed(FfiConverterString.INSTANCE.Read(stream));
            case 12: return new AgOuterException.HttpStrict200Response(FfiConverterString.INSTANCE.Read(stream));
            case 13: return new AgOuterException.FilterContentIsLikelyNotAFilter(FfiConverterString.INSTANCE.Read(stream));
            case 14: return new AgOuterException.FilterParserException(FfiConverterString.INSTANCE.Read(stream));
            case 15: return new AgOuterException.FieldIsEmpty(FfiConverterString.INSTANCE.Read(stream));
            case 16: return new AgOuterException.Mutex(FfiConverterString.INSTANCE.Read(stream));
            case 17: return new AgOuterException.InvalidConfiguration(FfiConverterString.INSTANCE.Read(stream));
            case 18: return new AgOuterException.Other(FfiConverterString.INSTANCE.Read(stream));
            default:
                throw new InternalException(String.Format("invalid error value '{0}' in FfiConverterTypeAgOuterException.Read()", value));
        }
    }

    public override int AllocationSize(AgOuterException value) {
        return 4 + FfiConverterString.INSTANCE.AllocationSize(value.Message);
    }

    public override void Write(AgOuterException value, BigEndianStream stream) {
        switch (value) {
            case AgOuterException.CannotOpenDatabase:
                stream.WriteInt(1);
                break;
            case AgOuterException.NotADatabase:
                stream.WriteInt(2);
                break;
            case AgOuterException.DiskFull:
                stream.WriteInt(3);
                break;
            case AgOuterException.DatabaseBusy:
                stream.WriteInt(4);
                break;
            case AgOuterException.EntityNotFound:
                stream.WriteInt(5);
                break;
            case AgOuterException.PathNotFound:
                stream.WriteInt(6);
                break;
            case AgOuterException.PathHasDeniedPermission:
                stream.WriteInt(7);
                break;
            case AgOuterException.PathAlreadyExists:
                stream.WriteInt(8);
                break;
            case AgOuterException.TimedOut:
                stream.WriteInt(9);
                break;
            case AgOuterException.HttpClientNetworkException:
                stream.WriteInt(10);
                break;
            case AgOuterException.HttpClientBodyRecoveryFailed:
                stream.WriteInt(11);
                break;
            case AgOuterException.HttpStrict200Response:
                stream.WriteInt(12);
                break;
            case AgOuterException.FilterContentIsLikelyNotAFilter:
                stream.WriteInt(13);
                break;
            case AgOuterException.FilterParserException:
                stream.WriteInt(14);
                break;
            case AgOuterException.FieldIsEmpty:
                stream.WriteInt(15);
                break;
            case AgOuterException.Mutex:
                stream.WriteInt(16);
                break;
            case AgOuterException.InvalidConfiguration:
                stream.WriteInt(17);
                break;
            case AgOuterException.Other:
                stream.WriteInt(18);
                break;
            default:
                throw new InternalException(String.Format("invalid error value '{0}' in FfiConverterTypeAgOuterException.Write()", value));
        }
    }
}





internal enum FilterListType: int {
    
    Standard,
    Dns
}

class FfiConverterTypeFilterListType: FfiConverterRustBuffer<FilterListType> {
    public static FfiConverterTypeFilterListType INSTANCE = new FfiConverterTypeFilterListType();

    public override FilterListType Read(BigEndianStream stream) {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(FilterListType), value)) {
            return (FilterListType)value;
        } else {
            throw new InternalException(String.Format("invalid enum value '{0}' in FfiConverterTypeFilterListType.Read()", value));
        }
    }

    public override int AllocationSize(FilterListType value) {
        return 4;
    }

    public override void Write(FilterListType value, BigEndianStream stream) {
        stream.WriteInt((int)value + 1);
    }
}







internal record RequestProxyMode {
    
    public record UseSystemProxy: RequestProxyMode {}
    
    
    public record NoProxy: RequestProxyMode {}
    
    
    public record UseCustomProxy (
        String @addr
    ) : RequestProxyMode {}
    

    
}

class FfiConverterTypeRequestProxyMode : FfiConverterRustBuffer<RequestProxyMode>{
    public static FfiConverterRustBuffer<RequestProxyMode> INSTANCE = new FfiConverterTypeRequestProxyMode();

    public override RequestProxyMode Read(BigEndianStream stream) {
        var value = stream.ReadInt();
        switch (value) {
            case 1:
                return new RequestProxyMode.UseSystemProxy(
                );
            case 2:
                return new RequestProxyMode.NoProxy(
                );
            case 3:
                return new RequestProxyMode.UseCustomProxy(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            default:
                throw new InternalException(String.Format("invalid enum value '{0}' in FfiConverterTypeRequestProxyMode.Read()", value));
        }
    }

    public override int AllocationSize(RequestProxyMode value) {
        switch (value) {
            case RequestProxyMode.UseSystemProxy variant_value:
                return 4;
            case RequestProxyMode.NoProxy variant_value:
                return 4;
            case RequestProxyMode.UseCustomProxy variant_value:
                return 4
                    + FfiConverterString.INSTANCE.AllocationSize(variant_value.@addr);
            default:
                throw new InternalException(String.Format("invalid enum value '{0}' in FfiConverterTypeRequestProxyMode.AllocationSize()", value));
        }
    }

    public override void Write(RequestProxyMode value, BigEndianStream stream) {
        switch (value) {
            case RequestProxyMode.UseSystemProxy variant_value:
                stream.WriteInt(1);
                break;
            case RequestProxyMode.NoProxy variant_value:
                stream.WriteInt(2);
                break;
            case RequestProxyMode.UseCustomProxy variant_value:
                stream.WriteInt(3);
                FfiConverterString.INSTANCE.Write(variant_value.@addr, stream);
                break;
            default:
                throw new InternalException(String.Format("invalid enum value '{0}' in FfiConverterTypeRequestProxyMode.Write()", value));
        }
    }
}






class FfiConverterOptionalInt32: FfiConverterRustBuffer<int?> {
    public static FfiConverterOptionalInt32 INSTANCE = new FfiConverterOptionalInt32();

    public override int? Read(BigEndianStream stream) {
        if (stream.ReadByte() == 0) {
            return null;
        }
        return FfiConverterInt32.INSTANCE.Read(stream);
    }

    public override int AllocationSize(int? value) {
        if (value == null) {
            return 1;
        } else {
            return 1 + FfiConverterInt32.INSTANCE.AllocationSize((int)value);
        }
    }

    public override void Write(int? value, BigEndianStream stream) {
        if (value == null) {
            stream.WriteByte(0);
        } else {
            stream.WriteByte(1);
            FfiConverterInt32.INSTANCE.Write((int)value, stream);
        }
    }
}




class FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    public static FfiConverterOptionalString INSTANCE = new FfiConverterOptionalString();

    public override String? Read(BigEndianStream stream) {
        if (stream.ReadByte() == 0) {
            return null;
        }
        return FfiConverterString.INSTANCE.Read(stream);
    }

    public override int AllocationSize(String? value) {
        if (value == null) {
            return 1;
        } else {
            return 1 + FfiConverterString.INSTANCE.AllocationSize((String)value);
        }
    }

    public override void Write(String? value, BigEndianStream stream) {
        if (value == null) {
            stream.WriteByte(0);
        } else {
            stream.WriteByte(1);
            FfiConverterString.INSTANCE.Write((String)value, stream);
        }
    }
}




class FfiConverterOptionalTypeFilterListRules: FfiConverterRustBuffer<FilterListRules?> {
    public static FfiConverterOptionalTypeFilterListRules INSTANCE = new FfiConverterOptionalTypeFilterListRules();

    public override FilterListRules? Read(BigEndianStream stream) {
        if (stream.ReadByte() == 0) {
            return null;
        }
        return FfiConverterTypeFilterListRules.INSTANCE.Read(stream);
    }

    public override int AllocationSize(FilterListRules? value) {
        if (value == null) {
            return 1;
        } else {
            return 1 + FfiConverterTypeFilterListRules.INSTANCE.AllocationSize((FilterListRules)value);
        }
    }

    public override void Write(FilterListRules? value, BigEndianStream stream) {
        if (value == null) {
            stream.WriteByte(0);
        } else {
            stream.WriteByte(1);
            FfiConverterTypeFilterListRules.INSTANCE.Write((FilterListRules)value, stream);
        }
    }
}




class FfiConverterOptionalTypeFullFilterList: FfiConverterRustBuffer<FullFilterList?> {
    public static FfiConverterOptionalTypeFullFilterList INSTANCE = new FfiConverterOptionalTypeFullFilterList();

    public override FullFilterList? Read(BigEndianStream stream) {
        if (stream.ReadByte() == 0) {
            return null;
        }
        return FfiConverterTypeFullFilterList.INSTANCE.Read(stream);
    }

    public override int AllocationSize(FullFilterList? value) {
        if (value == null) {
            return 1;
        } else {
            return 1 + FfiConverterTypeFullFilterList.INSTANCE.AllocationSize((FullFilterList)value);
        }
    }

    public override void Write(FullFilterList? value, BigEndianStream stream) {
        if (value == null) {
            stream.WriteByte(0);
        } else {
            stream.WriteByte(1);
            FfiConverterTypeFullFilterList.INSTANCE.Write((FullFilterList)value, stream);
        }
    }
}




class FfiConverterOptionalTypeStoredFilterMetadata: FfiConverterRustBuffer<StoredFilterMetadata?> {
    public static FfiConverterOptionalTypeStoredFilterMetadata INSTANCE = new FfiConverterOptionalTypeStoredFilterMetadata();

    public override StoredFilterMetadata? Read(BigEndianStream stream) {
        if (stream.ReadByte() == 0) {
            return null;
        }
        return FfiConverterTypeStoredFilterMetadata.INSTANCE.Read(stream);
    }

    public override int AllocationSize(StoredFilterMetadata? value) {
        if (value == null) {
            return 1;
        } else {
            return 1 + FfiConverterTypeStoredFilterMetadata.INSTANCE.AllocationSize((StoredFilterMetadata)value);
        }
    }

    public override void Write(StoredFilterMetadata? value, BigEndianStream stream) {
        if (value == null) {
            stream.WriteByte(0);
        } else {
            stream.WriteByte(1);
            FfiConverterTypeStoredFilterMetadata.INSTANCE.Write((StoredFilterMetadata)value, stream);
        }
    }
}




class FfiConverterOptionalTypeUpdateResult: FfiConverterRustBuffer<UpdateResult?> {
    public static FfiConverterOptionalTypeUpdateResult INSTANCE = new FfiConverterOptionalTypeUpdateResult();

    public override UpdateResult? Read(BigEndianStream stream) {
        if (stream.ReadByte() == 0) {
            return null;
        }
        return FfiConverterTypeUpdateResult.INSTANCE.Read(stream);
    }

    public override int AllocationSize(UpdateResult? value) {
        if (value == null) {
            return 1;
        } else {
            return 1 + FfiConverterTypeUpdateResult.INSTANCE.AllocationSize((UpdateResult)value);
        }
    }

    public override void Write(UpdateResult? value, BigEndianStream stream) {
        if (value == null) {
            stream.WriteByte(0);
        } else {
            stream.WriteByte(1);
            FfiConverterTypeUpdateResult.INSTANCE.Write((UpdateResult)value, stream);
        }
    }
}




class FfiConverterOptionalSequenceString: FfiConverterRustBuffer<List<String>?> {
    public static FfiConverterOptionalSequenceString INSTANCE = new FfiConverterOptionalSequenceString();

    public override List<String>? Read(BigEndianStream stream) {
        if (stream.ReadByte() == 0) {
            return null;
        }
        return FfiConverterSequenceString.INSTANCE.Read(stream);
    }

    public override int AllocationSize(List<String>? value) {
        if (value == null) {
            return 1;
        } else {
            return 1 + FfiConverterSequenceString.INSTANCE.AllocationSize((List<String>)value);
        }
    }

    public override void Write(List<String>? value, BigEndianStream stream) {
        if (value == null) {
            stream.WriteByte(0);
        } else {
            stream.WriteByte(1);
            FfiConverterSequenceString.INSTANCE.Write((List<String>)value, stream);
        }
    }
}




class FfiConverterSequenceInt32: FfiConverterRustBuffer<List<int>> {
    public static FfiConverterSequenceInt32 INSTANCE = new FfiConverterSequenceInt32();

    public override List<int> Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var result = new List<int>(length);
        for (int i = 0; i < length; i++) {
            result.Add(FfiConverterInt32.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<int> value) {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            return sizeForLength;
        }

        var sizeForItems = value.Select(item => FfiConverterInt32.INSTANCE.AllocationSize(item)).Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<int> value, BigEndianStream stream) {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterInt32.INSTANCE.Write(item, stream));
    }
}




class FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    public static FfiConverterSequenceString INSTANCE = new FfiConverterSequenceString();

    public override List<String> Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var result = new List<String>(length);
        for (int i = 0; i < length; i++) {
            result.Add(FfiConverterString.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<String> value) {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            return sizeForLength;
        }

        var sizeForItems = value.Select(item => FfiConverterString.INSTANCE.AllocationSize(item)).Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<String> value, BigEndianStream stream) {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterString.INSTANCE.Write(item, stream));
    }
}




class FfiConverterSequenceTypeActiveRulesInfo: FfiConverterRustBuffer<List<ActiveRulesInfo>> {
    public static FfiConverterSequenceTypeActiveRulesInfo INSTANCE = new FfiConverterSequenceTypeActiveRulesInfo();

    public override List<ActiveRulesInfo> Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var result = new List<ActiveRulesInfo>(length);
        for (int i = 0; i < length; i++) {
            result.Add(FfiConverterTypeActiveRulesInfo.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<ActiveRulesInfo> value) {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            return sizeForLength;
        }

        var sizeForItems = value.Select(item => FfiConverterTypeActiveRulesInfo.INSTANCE.AllocationSize(item)).Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<ActiveRulesInfo> value, BigEndianStream stream) {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeActiveRulesInfo.INSTANCE.Write(item, stream));
    }
}




class FfiConverterSequenceTypeDisabledRulesRaw: FfiConverterRustBuffer<List<DisabledRulesRaw>> {
    public static FfiConverterSequenceTypeDisabledRulesRaw INSTANCE = new FfiConverterSequenceTypeDisabledRulesRaw();

    public override List<DisabledRulesRaw> Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var result = new List<DisabledRulesRaw>(length);
        for (int i = 0; i < length; i++) {
            result.Add(FfiConverterTypeDisabledRulesRaw.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<DisabledRulesRaw> value) {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            return sizeForLength;
        }

        var sizeForItems = value.Select(item => FfiConverterTypeDisabledRulesRaw.INSTANCE.AllocationSize(item)).Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<DisabledRulesRaw> value, BigEndianStream stream) {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeDisabledRulesRaw.INSTANCE.Write(item, stream));
    }
}




class FfiConverterSequenceTypeFilterGroup: FfiConverterRustBuffer<List<FilterGroup>> {
    public static FfiConverterSequenceTypeFilterGroup INSTANCE = new FfiConverterSequenceTypeFilterGroup();

    public override List<FilterGroup> Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var result = new List<FilterGroup>(length);
        for (int i = 0; i < length; i++) {
            result.Add(FfiConverterTypeFilterGroup.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<FilterGroup> value) {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            return sizeForLength;
        }

        var sizeForItems = value.Select(item => FfiConverterTypeFilterGroup.INSTANCE.AllocationSize(item)).Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<FilterGroup> value, BigEndianStream stream) {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeFilterGroup.INSTANCE.Write(item, stream));
    }
}




class FfiConverterSequenceTypeFilterListRulesRaw: FfiConverterRustBuffer<List<FilterListRulesRaw>> {
    public static FfiConverterSequenceTypeFilterListRulesRaw INSTANCE = new FfiConverterSequenceTypeFilterListRulesRaw();

    public override List<FilterListRulesRaw> Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var result = new List<FilterListRulesRaw>(length);
        for (int i = 0; i < length; i++) {
            result.Add(FfiConverterTypeFilterListRulesRaw.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<FilterListRulesRaw> value) {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            return sizeForLength;
        }

        var sizeForItems = value.Select(item => FfiConverterTypeFilterListRulesRaw.INSTANCE.AllocationSize(item)).Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<FilterListRulesRaw> value, BigEndianStream stream) {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeFilterListRulesRaw.INSTANCE.Write(item, stream));
    }
}




class FfiConverterSequenceTypeFilterTag: FfiConverterRustBuffer<List<FilterTag>> {
    public static FfiConverterSequenceTypeFilterTag INSTANCE = new FfiConverterSequenceTypeFilterTag();

    public override List<FilterTag> Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var result = new List<FilterTag>(length);
        for (int i = 0; i < length; i++) {
            result.Add(FfiConverterTypeFilterTag.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<FilterTag> value) {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            return sizeForLength;
        }

        var sizeForItems = value.Select(item => FfiConverterTypeFilterTag.INSTANCE.AllocationSize(item)).Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<FilterTag> value, BigEndianStream stream) {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeFilterTag.INSTANCE.Write(item, stream));
    }
}




class FfiConverterSequenceTypeFullFilterList: FfiConverterRustBuffer<List<FullFilterList>> {
    public static FfiConverterSequenceTypeFullFilterList INSTANCE = new FfiConverterSequenceTypeFullFilterList();

    public override List<FullFilterList> Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var result = new List<FullFilterList>(length);
        for (int i = 0; i < length; i++) {
            result.Add(FfiConverterTypeFullFilterList.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<FullFilterList> value) {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            return sizeForLength;
        }

        var sizeForItems = value.Select(item => FfiConverterTypeFullFilterList.INSTANCE.AllocationSize(item)).Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<FullFilterList> value, BigEndianStream stream) {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeFullFilterList.INSTANCE.Write(item, stream));
    }
}




class FfiConverterSequenceTypeRulesCountByFilter: FfiConverterRustBuffer<List<RulesCountByFilter>> {
    public static FfiConverterSequenceTypeRulesCountByFilter INSTANCE = new FfiConverterSequenceTypeRulesCountByFilter();

    public override List<RulesCountByFilter> Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var result = new List<RulesCountByFilter>(length);
        for (int i = 0; i < length; i++) {
            result.Add(FfiConverterTypeRulesCountByFilter.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<RulesCountByFilter> value) {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            return sizeForLength;
        }

        var sizeForItems = value.Select(item => FfiConverterTypeRulesCountByFilter.INSTANCE.AllocationSize(item)).Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<RulesCountByFilter> value, BigEndianStream stream) {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeRulesCountByFilter.INSTANCE.Write(item, stream));
    }
}




class FfiConverterSequenceTypeStoredFilterMetadata: FfiConverterRustBuffer<List<StoredFilterMetadata>> {
    public static FfiConverterSequenceTypeStoredFilterMetadata INSTANCE = new FfiConverterSequenceTypeStoredFilterMetadata();

    public override List<StoredFilterMetadata> Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var result = new List<StoredFilterMetadata>(length);
        for (int i = 0; i < length; i++) {
            result.Add(FfiConverterTypeStoredFilterMetadata.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<StoredFilterMetadata> value) {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            return sizeForLength;
        }

        var sizeForItems = value.Select(item => FfiConverterTypeStoredFilterMetadata.INSTANCE.AllocationSize(item)).Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<StoredFilterMetadata> value, BigEndianStream stream) {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeStoredFilterMetadata.INSTANCE.Write(item, stream));
    }
}




class FfiConverterSequenceTypeUpdateFilterError: FfiConverterRustBuffer<List<UpdateFilterError>> {
    public static FfiConverterSequenceTypeUpdateFilterError INSTANCE = new FfiConverterSequenceTypeUpdateFilterError();

    public override List<UpdateFilterError> Read(BigEndianStream stream) {
        var length = stream.ReadInt();
        var result = new List<UpdateFilterError>(length);
        for (int i = 0; i < length; i++) {
            result.Add(FfiConverterTypeUpdateFilterError.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<UpdateFilterError> value) {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            return sizeForLength;
        }

        var sizeForItems = value.Select(item => FfiConverterTypeUpdateFilterError.INSTANCE.AllocationSize(item)).Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<UpdateFilterError> value, BigEndianStream stream) {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null) {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeUpdateFilterError.INSTANCE.Write(item, stream));
    }
}
#pragma warning restore 8625
internal static class FlmFfiMethods {
    public static FilterListManagerConstants MakeConstantsStructure() {
        return FfiConverterTypeFilterListManagerConstants.INSTANCE.Lift(
    _UniffiHelpers.RustCall( (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_func_make_constants_structure( ref _status)
));
    }

    public static Configuration MakeDefaultConfiguration() {
        return FfiConverterTypeConfiguration.INSTANCE.Lift(
    _UniffiHelpers.RustCall( (ref RustCallStatus _status) =>
    _UniFFILib.uniffi_filter_list_manager_ffi_fn_func_make_default_configuration( ref _status)
));
    }

}

